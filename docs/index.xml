<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael W. Kearney</title>
    <link>/</link>
    <description>Recent content on Michael W. Kearney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© Michael W. Kearney 2018</copyright>
    <lastBuildDate>Wed, 01 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    

    <item>
      <title>Write an R package from scratch to CRAN</title>
      <link>/post/2019-05-01-writing-r-package/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-05-01-writing-r-package/</guid>
      <description>&lt;p&gt;Given widespread availability of tools and comprehensive guides already published on the subject, it’s clear to me &lt;strong&gt;&lt;em&gt;the biggest obstacle to writing one’s first R package is its&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;perceived difficulty&lt;/strong&gt;. And since every new blog post reshines the light on the amazing resources that already exist, I’ve written yet another blog post about &lt;em&gt;how to write an R package.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;useful-tools-and-guides-for-creating-r-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Useful Tools and Guides for Creating R Packages&lt;/h2&gt;
&lt;p&gt;On the topic of &lt;em&gt;how to write an R package&lt;/em&gt;, there are already several well-established tools (e.g., the &lt;a href=&#34;https://devtools.r-lib.org/&#34;&gt;{devtools}&lt;/a&gt; and &lt;a href=&#34;https://usethis.r-lib.org/&#34;&gt;{usethis}&lt;/a&gt; packages) and comprehensive guides (e.g., &lt;a href=&#34;https://cran.r-project.org/doc/manuals/r-release/R-exts.html&#34;&gt;Writing R Extensions by R Core Team&lt;/a&gt; and &lt;a href=&#34;http://r-pkgs.had.co.nz/&#34;&gt;R packages by Hadley Wickham&lt;/a&gt;). There are even several demystifying blog posts on the subject!&lt;/p&gt;
&lt;p&gt;One of the first (and probably most famous) blog posts is by &lt;a href=&#34;https://twitter.com/hspter&#34;&gt;Hilary Parker&lt;/a&gt;, who was nice enough to not only provide a timeless guide on writing an R package but also identify, number, and title the exact steps in the process:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;writing-an-r-package-from-scratch-by-hilary-parker&#34;&gt;&lt;a href=&#34;https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/&#34;&gt;Writing an R package from Scratch&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hspter&#34;&gt;Hilary Parker&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 0&lt;/strong&gt;: Packages you will need &lt;code&gt;c(&#34;devtools&#34;, &#34;roxygen&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Create your package directory &lt;code&gt;create(&#34;cats&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Add functions &lt;code&gt;cat_fun &amp;lt;- function(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Add documentation &lt;code&gt;#&#39; @param&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Process your documentation &lt;code&gt;devtools::document()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Install! &lt;code&gt;devtools::install()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The steps outlined above by Hilary Parker still essentially hold true today, but like most things related to software development, they don’t incorporate the newest (and in this case I think best) tools. For that, you can turn the post written by &lt;a href=&#34;https://twitter.com/tomwestlake121&#34;&gt;Tomas Westlake&lt;/a&gt;, which in addition to adding a few more steps (up to 10 steps instead of 6) also provides more timely references to useful developer tools:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;writing-an-r-package-from-scratch-by-tomas-westlake&#34;&gt;&lt;a href=&#34;https://r-mageddon.netlify.com/post/writing-an-r-package-from-scratch/&#34;&gt;Writing an R package from Scratch&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/tomwestlake121&#34;&gt;Tomas Westlake&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 0&lt;/strong&gt;: Packages we need &lt;code&gt;c(&#34;devtools&#34;, &#34;roxygen2&#34;, &#34;usethis&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Creating the package &lt;code&gt;usethis::create_package()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Adding functions &lt;code&gt;usethis::use_r()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Adding function documentation &lt;code&gt;devtools::document()&lt;/code&gt; and &lt;code&gt;devtools::install()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Editing your Description &lt;code&gt;use_cc0_license(&#34;First Last&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Add package documentation &lt;code&gt;usethis::use_package_doc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Adding a Git repo &lt;code&gt;usethis::use_git()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 7&lt;/strong&gt;: Uploading to GitHub &lt;code&gt;usethis::use_github()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 8&lt;/strong&gt;: Adding a Readme &lt;code&gt;usethis::use_readme_rmd()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 9&lt;/strong&gt;: Adding a logo &lt;code&gt;usethis::use_logo()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In addition to these &lt;em&gt;step-by-step&lt;/em&gt;/&lt;em&gt;how-to&lt;/em&gt; posts on how to write an R package, there is also a fantastic blog post written by &lt;a href=&#34;https://twitter.com/hvitfeldt&#34;&gt;Emil Hvitfedt&lt;/a&gt; on some additional tasks associated with testing, documenting, and maintaining R packages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;usethis-workflow-for-package-development-by-emil-hvitfedt&#34;&gt;&lt;a href=&#34;https://www.hvitfeldt.me/blog/usethis-workflow-for-package-development/&#34;&gt;usethis workflow for package development&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hvitfeldt&#34;&gt;Emil Hvitfedt&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Before creation &lt;code&gt;available::available()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creating minimal functional package &lt;code&gt;usethis::create_package()&lt;/code&gt; &lt;code&gt;usethis::use_git()&lt;/code&gt; &lt;code&gt;usethis::use_github()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;One time modifications &lt;code&gt;usethis::use_mit_license()&lt;/code&gt; &lt;code&gt;usethis::use_gpl3_license()&lt;/code&gt; &lt;code&gt;usethis::use_apl2_license()&lt;/code&gt; &lt;code&gt;usethis::use_cc0_license()&lt;/code&gt; &lt;code&gt;usethis::use_readme_rmd()&lt;/code&gt; &lt;code&gt;usethis::use_travis()&lt;/code&gt; &lt;code&gt;usethis::use_appveyor()&lt;/code&gt; &lt;code&gt;usethis::use_coverage(type = c(&#34;codecov&#34;))&lt;/code&gt; &lt;code&gt;use_testthat()&lt;/code&gt; &lt;code&gt;use_spell_check()&lt;/code&gt; &lt;code&gt;use_data_raw()&lt;/code&gt; &lt;code&gt;use_news_md()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Multiple time modifications &lt;code&gt;usr_r()&lt;/code&gt; &lt;code&gt;use_test(&#34;function_name&#34;)&lt;/code&gt; &lt;code&gt;use_package(&#34;dplyr&#34;)&lt;/code&gt; &lt;code&gt;use_vignette(&#34;How to do this cool analysis&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Before every commit (restart, document, check)&lt;/li&gt;
&lt;li&gt;Before every release &lt;code&gt;use_version()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;as well as an excellent evaluative blog post written by &lt;a href=&#34;https://twitter.com/ma_salmon&#34;&gt;Maëlle Salmon&lt;/a&gt; about what goes into &lt;em&gt;good&lt;/em&gt; &lt;strong&gt;open-science&lt;/strong&gt; R packages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;how-to-develop-good-r-packages-for-open-science-by-maëlle-salmon&#34;&gt;&lt;a href=&#34;https://masalmon.eu/2017/12/11/goodrpackages/&#34;&gt;How to develop good R packages (for open science)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/ma_salmon&#34;&gt;Maëlle Salmon&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Should your package even exist?&lt;/li&gt;
&lt;li&gt;What should your package contain exactly?&lt;/li&gt;
&lt;li&gt;What will your package be called? &lt;code&gt;available::available()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How to build an R package? &lt;a href=&#34;https://ropensci.github.io/dev_guide&#34;&gt;rOpenSci Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Where should your package live?&lt;/li&gt;
&lt;li&gt;How to check your package automatically &lt;code&gt;devtools::check()&lt;/code&gt; &lt;code&gt;styler::style()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bring the package to its users and get feedback &lt;code&gt;citation()&lt;/code&gt; &lt;a href=&#34;http://joss.theoj.org/&#34;&gt;Journal of Open Source Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the goal is to provide guidance on how to go from zero to sixty on writing an R package, it’s really tough to improve on these posts.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mwk&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;mwk&lt;/h2&gt;
&lt;div id=&#34;step-0-required-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 0: Required packages&lt;/h3&gt;
&lt;p&gt;Make sure you have the following packages installed:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;roxygen2&amp;quot;, &amp;quot;usethis&amp;quot;, &amp;quot;pkgdown&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-1-create&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 1: Create&lt;/h3&gt;
&lt;p&gt;Create the package/directory&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::create_package()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make it an R project&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::use_rstudio()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2-description&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 2: DESCRIPTION&lt;/h3&gt;
&lt;p&gt;Add a license&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::use_mit_license()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add dependencies&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::use_package()
usethis::use_pipe()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3-functiondata&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 3: Function/data&lt;/h3&gt;
&lt;p&gt;Add some functions and/or data&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::use_fun()
usethis::use_data()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to document them, i.e., &lt;code&gt;#&#39; @param&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 4: Documentation &lt;code&gt;usethis::use_package_doc()&lt;/code&gt; &lt;code&gt;usethis::use_news_md()&lt;/code&gt; &lt;code&gt;usethis::use_readme_rmd()&lt;/code&gt; &lt;code&gt;usethis::use_vignette()&lt;/code&gt; &lt;code&gt;usethis::use_logo()&lt;/code&gt; &lt;code&gt;usethis::use_lifecycle_logo()&lt;/code&gt; &lt;code&gt;usethis::use_cran_logo()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Step 5: Build &lt;code&gt;devtools::document()&lt;/code&gt; &lt;code&gt;devtools::install()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Step 6: Tests &lt;code&gt;usethis::use_testthat()&lt;/code&gt; &lt;code&gt;usethis::use_test()&lt;/code&gt; &lt;code&gt;usethis::use_coverage(type = c(&#34;codecov&#34;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Step 7: Continuous-Integration &lt;code&gt;usethis::use_travis()&lt;/code&gt; &lt;code&gt;usethis::use_appveyor()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Step 8: Website &lt;code&gt;pkgdown::build_site()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Step 9: Git/Github &lt;code&gt;usethis::use_git()&lt;/code&gt; &lt;code&gt;usethis::use_github()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Three things to know beyond base R</title>
      <link>/post/2019-04-23-three-things-to-know-beyond-base-r/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-04-23-three-things-to-know-beyond-base-r/</guid>
      <description>&lt;p&gt;I think it’s fair to say that most academics who learn about R do so in the process of training or applying quantitative research methods. As a consequence, knowledge of R among academics tends to be limited to core (base) R packages (R Core Team, 2018) and a small handful of speciality statistical packages, e.g., {lavaan}, {lme4}, {MASS}, {car}, etc. With this in mind, the goal of this post is to provide an overview of three things to know beyond base R.&lt;/p&gt;
&lt;p&gt;A more appropriate title for this post could be, “A quick introduction to the tidyverse,” as all of the following things to know beyond base R come from the &lt;a href=&#34;https://tidyverse.org&#34;&gt;{tidyverse}&lt;/a&gt;–a collection of high-powered, consistent, and easy-to-use packages developed by a number of thoughtful and talented R developers, so this should really be considered an exceptionally brief introduction to parts of the tidyverse. But users don’t need to know know everything about the tidyverse to reap the benefits of it. However, if you’re interested in a more formal/thorough introduction to the tidyverse, I would strongly encourage you to checkout &lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;R for Data Science by Garrett Groleman and Hadley Wickham&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those of you who still might be hestitant about moving beyond base R, consider the plot below, which shows the download counts of {tidyverse} packages compared to several well-known and highly-regarded statistical packages.&lt;/p&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/download-counts.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;This plot hopefully demonstrates two things. First, that a lot of people use (and therefore test, troubleshoot, and write documentation for) tidyverse packages. Second, that use of tidyverse packages is not merely a fad or momentary trend. Indeed, compared to widely used statistical packages, there is a considerably higher download rate among tidyverse packages (even above and beyond the general uptick in overall R usage).&lt;/p&gt;
&lt;div id=&#34;the-pipe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. The pipe&lt;/h2&gt;
&lt;p&gt;The first thing to know beyond base R is &lt;strong&gt;the pipe&lt;/strong&gt;. The &lt;em&gt;pipe&lt;/em&gt; refers to the &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator from the &lt;a href=&#34;https://magrittr.tidyverse.org&#34;&gt;{magrittr}&lt;/a&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It may seem complicated at first, but what the pipe does is actually quite simple. That is, &lt;strong&gt;it allows users to write linear code&lt;/strong&gt;. To illustrate use of the pipe, consider the following code that takes the mean of the log of three numbers:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(log(c(1, 3, 9)))
#&amp;gt; [1] 1.098612&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the numbers &lt;code&gt;c(1, 3, 9)&lt;/code&gt; are nested inside &lt;code&gt;log()&lt;/code&gt;, which is then nested inside &lt;code&gt;mean()&lt;/code&gt;? If you’re reading the code from left-to-right, it means the &lt;em&gt;functions are performed in reverse order from how they are written&lt;/em&gt;. If we broke the code down into its three functions, we would actually expect the order of operations to proceed as follows:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Concacenate numbers into vector &lt;code&gt;c(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Log the numeric vector &lt;code&gt;log(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Estimate the mean of the logged numeric vector &lt;code&gt;mean(...)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this order in mind, now consider the following &lt;em&gt;piped code&lt;/em&gt;, which takes a numeric vector &lt;code&gt;c(1, 3, 9)&lt;/code&gt;, calculates the &lt;code&gt;log()&lt;/code&gt;, and then estimates the &lt;code&gt;mean()&lt;/code&gt;. Hopefully you notice that, in contrast to the nested code above, the code below is linear; in other words, the code appears in the same order (moving from left to right) as the operations are performed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(1, 3, 9) %&amp;gt;% log() %&amp;gt;% mean()
#&amp;gt; [1] 1.098612&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a convention designed to make piped code even &lt;em&gt;easier&lt;/em&gt; to read, users are encouraged to place each piped statement on its own line. So the code above should be rewritten as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(1, 3, 9) %&amp;gt;%
  log() %&amp;gt;%
  mean()
#&amp;gt; [1] 1.098612&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. The tibble&lt;/h2&gt;
&lt;p&gt;R is my favorite programming language because nearly everyone who uses it either works with &lt;strong&gt;data frames&lt;/strong&gt; or is extremely familiar with them. With all of the use and attention, it is hardly surprising that there would be some improvements to the traditional &lt;code&gt;data.frame&lt;/code&gt;, which is why &lt;strong&gt;the tibble&lt;/strong&gt; is the second thing to know beyond base R. The &lt;em&gt;tibble&lt;/em&gt; refers to a data frame-like class produced by the &lt;a href=&#34;https://tibble.tidyverse.org&#34;&gt;{tibble}&lt;/a&gt; package. Tibbles (class &lt;code&gt;tbl_df&lt;/code&gt;) are essentially a special variant of data frames that have desirable properties for printing and joining. And because they also inherit the &lt;code&gt;data.frame&lt;/code&gt; class, they also behave like data frames 99.9% (and, seriously, I wouldn’t worry about the 0.1%).&lt;/p&gt;
&lt;p&gt;As the code illustrates below, it’s easy to convert nearly any data frame into a tibble via &lt;code&gt;tibble::as_tibble()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(mtcars &amp;lt;- tibble::as_tibble(mtcars))
#&amp;gt; # A tibble: 32 x 11
#&amp;gt;     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4
#&amp;gt; 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4
#&amp;gt; 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1
#&amp;gt; 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1
#&amp;gt; 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2
#&amp;gt; # … with 27 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s also possible to create tibbles directly via &lt;code&gt;tibble::tibble(...)&lt;/code&gt;, e.g.,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble::tibble(
  x = rnorm(100),
  y = rnorm(100),
  z = sample(letters, 100, replace = TRUE)
)
#&amp;gt; # A tibble: 100 x 3
#&amp;gt;       x      y z    
#&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 0.138  0.851 u    
#&amp;gt; 2 0.894 -0.295 m    
#&amp;gt; 3 0.377  1.61  u    
#&amp;gt; 4 0.345 -0.332 r    
#&amp;gt; 5 0.508  1.24  m    
#&amp;gt; # … with 95 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You hopefully noticed in the printing of the two previous code chunks that tibbles print out a lot prettier than normal data frames. Each observations is limited to a single line (no horizontal scrolling or wrapping). Not all rows are printed by default. And the printout also includes meta information about the classes of variables and the number of rows and columns and in the data set.&lt;/p&gt;
&lt;p&gt;If you were really paying attention, you may have also noticed the &lt;code&gt;z&lt;/code&gt; variable in the tibble built from scratch was stored (by default) as a &lt;code&gt;character&lt;/code&gt; vector and not a &lt;code&gt;factor&lt;/code&gt;. This is another important difference in tibbles compared to data frames. Tibbles are lazy, which is this case is useful for avoiding join or mutate errors later on related to a limited set of observed factor levels.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;select-filter-arrange-and-mutate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Select, filter, arrange, and mutate&lt;/h2&gt;
&lt;p&gt;If I could only use one package beyond base R, it’d probably be &lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;{dplyr}&lt;/a&gt;, which is why key &lt;strong&gt;dplyr&lt;/strong&gt; functions are the third thing to learn beyond base R. Compared to base R, the beauty of these {dplyr} functions is that they feature consistent design principles, easily work with non-standard evaluation (i.e., you don’t have to put quotes around variable names), and even leverage c++ behind the scenes for improved performance.&lt;/p&gt;
&lt;p&gt;{dplyr} has &lt;a href=&#34;https://dplyr.tidyverse.org/reference/index.html&#34;&gt;tons of useful features&lt;/a&gt;, but its fundamental building blocks allow users to &lt;strong&gt;select columns&lt;/strong&gt;,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dplyr::select(mtcars, cyl, wt, mpg, gear)
#&amp;gt; # A tibble: 32 x 4
#&amp;gt;     cyl    wt   mpg  gear
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1     6  2.62  21       4
#&amp;gt; 2     6  2.88  21       4
#&amp;gt; 3     4  2.32  22.8     4
#&amp;gt; 4     6  3.22  21.4     3
#&amp;gt; 5     8  3.44  18.7     3
#&amp;gt; # … with 27 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mutate columns&lt;/strong&gt; (i.e., transform, add),&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;%
  dplyr::mutate(mpg_per_cyl = mpg / cyl,
    car = row.names(datasets::mtcars)) %&amp;gt;%
  dplyr::select(car, mpg, cyl, mpg_per_cyl)
#&amp;gt; # A tibble: 32 x 4
#&amp;gt;   car                 mpg   cyl mpg_per_cyl
#&amp;gt;   &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Mazda RX4          21       6        3.5 
#&amp;gt; 2 Mazda RX4 Wag      21       6        3.5 
#&amp;gt; 3 Datsun 710         22.8     4        5.7 
#&amp;gt; 4 Hornet 4 Drive     21.4     6        3.57
#&amp;gt; 5 Hornet Sportabout  18.7     8        2.34
#&amp;gt; # … with 27 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;filter rows&lt;/strong&gt;,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dplyr::filter(mtcars, cyl == 4, mpg &amp;gt;= 10)
#&amp;gt; # A tibble: 11 x 11
#&amp;gt;     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
#&amp;gt; 2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
#&amp;gt; 3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
#&amp;gt; 4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
#&amp;gt; 5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
#&amp;gt; # … with 6 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and &lt;strong&gt;arrange rows&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dplyr::arrange(mtcars, dplyr::desc(mpg))
#&amp;gt; # A tibble: 32 x 11
#&amp;gt;     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
#&amp;gt; 2  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
#&amp;gt; 3  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
#&amp;gt; 4  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
#&amp;gt; 5  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
#&amp;gt; # … with 27 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chain these {dplyr} functions together with the pipe operator &lt;code&gt;%&amp;gt;%&lt;/code&gt; to achieve linear/tidyverse-style coding excellence.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;%
  dplyr::filter(gear == 4) %&amp;gt;%
  dplyr::mutate(wt_mpg = wt / mpg) %&amp;gt;%
  dplyr::select(cyl, wt, mpg, wt_mpg) %&amp;gt;%
  dplyr::arrange(wt_mpg)
#&amp;gt; # A tibble: 12 x 4
#&amp;gt;     cyl    wt   mpg wt_mpg
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4  1.62  30.4 0.0531
#&amp;gt; 2     4  1.84  33.9 0.0541
#&amp;gt; 3     4  2.2   32.4 0.0679
#&amp;gt; 4     4  1.94  27.3 0.0709
#&amp;gt; 5     4  2.32  22.8 0.102 
#&amp;gt; # … with 7 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Faster code with Rcpp</title>
      <link>/post/2019-04-10-faster-code-with-rcpp/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-04-10-faster-code-with-rcpp/</guid>
      <description>&lt;p&gt;Recently I was asked if I could add to &lt;a href=&#34;https://rtweet.info&#34;&gt;{rtweet}&lt;/a&gt; some basic functions for converting Twitter data into network data objects. I thought this was a reasonable request and a good opportunity for me to learn more about network analysis. But the task of converting Twitter data into network-friendly objects is something that has, at least for me, been really &lt;em&gt;slow and inefficient&lt;/em&gt;. So, for the past several weeks, I’ve been slowly working toward &lt;em&gt;what I think believe a simple but efficient solution&lt;/em&gt;. Hence, the purpose of this blog post is to document what I’ve done.&lt;/p&gt;
&lt;div id=&#34;the-problem&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;The ultimate task at issue is &lt;em&gt;converting Twitter data&lt;sup&gt;1&lt;/sup&gt; into a network or network-friendly data object&lt;/em&gt;. Thus, the immediate problem is &lt;strong&gt;quickly and efficiently unrolling the connections (e.g., &lt;em&gt;mentions&lt;/em&gt;) &lt;code&gt;from&lt;/code&gt; one user &lt;code&gt;to&lt;/code&gt; zero or more other users&lt;/strong&gt;. In other words, the problem is figure out how to convert this recursive data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 163 x 2
#&amp;gt;    user_id mentions_user_id
#&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;list&amp;gt;          
#&amp;gt;  1 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt;  2 5685812 &amp;lt;chr [2]&amp;gt;       
#&amp;gt;  3 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt;  4 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt;  5 5685812 &amp;lt;chr [2]&amp;gt;       
#&amp;gt;  6 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt;  7 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt;  8 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt;  9 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt; 10 5685812 &amp;lt;chr [1]&amp;gt;       
#&amp;gt; # … with 153 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into a desired output (with &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;-like columns) that looks something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble::as_tibble(unroll_connections2(d))
#&amp;gt; # A tibble: 220 x 2
#&amp;gt;    from    to                 
#&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;              
#&amp;gt;  1 5685812 2973406683         
#&amp;gt;  2 5685812 215035672          
#&amp;gt;  3 5685812 1051975721885798402
#&amp;gt;  4 5685812 1015516068717170688
#&amp;gt;  5 5685812 2801252524         
#&amp;gt;  6 5685812 15184835           
#&amp;gt;  7 5685812 260399941          
#&amp;gt;  8 5685812 17581779           
#&amp;gt;  9 5685812 870078805381132288 
#&amp;gt; 10 5685812 4069028055         
#&amp;gt; # … with 210 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pure-r-code-slowest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pure R code (slowest)&lt;/h2&gt;
&lt;p&gt;The first function I wrote to accomplish this task leveraged &lt;code&gt;data.frame&lt;/code&gt; logic (&lt;em&gt;each column should be the same length&lt;/em&gt;) to coerce the &lt;code&gt;from&lt;/code&gt; column (&lt;code&gt;user_id&lt;/code&gt;) to be of equal length as the &lt;code&gt;to&lt;/code&gt; (&lt;code&gt;mentions_user_id&lt;/code&gt;) column for each row of the input data set. It then collapses everything into a single data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unroll_connections1 &amp;lt;- function(.x) {
  fun &amp;lt;- function(from, to) {
    ## if NULL or 1 missing value then return empty tibble
    if (length(to) == 0 || (length(to) == 1 &amp;amp;&amp;amp; is.na(to[1]))) {
      return(data.frame())
    }
    ## return as tibble
    data.frame(from = from, to = unlist(to, use.names = FALSE),
      stringsAsFactors = FALSE)
  }
  .x &amp;lt;- mapply(fun, .x[[1]], .x[[2]], USE.NAMES = FALSE)
  do.call(rbind, .x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code is slow and inefficient because it calls &lt;code&gt;data.frame()&lt;/code&gt; (and all its associated baggage) &lt;strong&gt;for every row&lt;/strong&gt; of the input data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pure-r-code-faster&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pure R code (faster)&lt;/h2&gt;
&lt;p&gt;My next iteration was also written in pure R code. To minimize the effect of so many &lt;code&gt;data.frame()&lt;/code&gt; calls, the function below calculates the number of times it needs to repeat the &lt;code&gt;from&lt;/code&gt; value (to match the number of times &lt;code&gt;to&lt;/code&gt; values appear) and then combines everything &lt;em&gt;at the end&lt;/em&gt; into a data frame. As the benchmarking results later on confirm, this function offers a &lt;strong&gt;sizable speed up&lt;/strong&gt; over the original, &lt;code&gt;data.frame()&lt;/code&gt;-heavy function!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unroll_connections2 &amp;lt;- function(x) {
  ## initialize logical (TRUE) vector
  kp &amp;lt;- !logical(nrow(x))

  ## measure [and record] length of each &amp;#39;to&amp;#39; field (list of character vector)
  n &amp;lt;- lengths(x[[2]])
  n1 &amp;lt;- which(n == 1)

  ## if length == 1 &amp;amp; is.na(x[1])
  kp[n1[vapply(x[[2]][n1], is.na, logical(1))]] &amp;lt;- FALSE

  ## crate &amp;#39;from&amp;#39; and &amp;#39;to&amp;#39; vectors
  from &amp;lt;- unlist(mapply(rep, x[[1]][kp], n[kp]), use.names = FALSE)
  to &amp;lt;- unlist(x[[2]][kp], use.names = FALSE)

  ## return as data frame
  data.frame(
    from = from,
    to = to,
    stringsAsFactors = FALSE
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rcpp-code-fastest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rcpp code (fastest)&lt;/h2&gt;
&lt;p&gt;I was happy with the large speed up from &lt;code&gt;unroll_connections2()&lt;/code&gt;, but I’ve also been trying to learn how to speed up my code with &lt;strong&gt;c++&lt;/strong&gt;, so I decided to see what kind of additional speed up I could get via &lt;a href=&#34;https://www.rcpp.org&#34;&gt;{Rcpp}&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;Rcpp.h&amp;gt;

using namespace Rcpp;

// [[Rcpp::export]]
List unroll_connections3(CharacterVector from, std::vector&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt; to) {
  //# set size paramaeters (exclude NAs from the &amp;#39;to&amp;#39;-based output count)
  const int n = from.size();
  int len = 0;
  for (int i = 0; i &amp;lt; n; i++) {
    if (to[i][0] != &amp;quot;NA&amp;quot;) {
      len += to[i].size();
    }
  }
  //# use calculated lengths to initialize output character vectors 
  CharacterVector from2(len);
  CharacterVector to2(len);

  //# for each value of the &amp;#39;from&amp;#39; vector, create appropriately re-sized from2 
  //# and to2 vectors
  int ctr = 0;
  for (int i = 0; i &amp;lt; n; i++) {
    int nn = to[i].size();
    for (int j = 0; j &amp;lt; nn; j++) {
      if (j == 0) {
        if (to[i][j] != &amp;quot;NA&amp;quot;) {
          from2[ctr] = from[i];
          to2[ctr] = to[i][j];
          ctr += 1;
        }
      } else {
        from2[ctr] = from[i];
        to2[ctr] = to[i][j];
        ctr += 1;
      }
    }
  }
  //# combine the new [flat] vectors into a data frame (requires row names)
  List df = List::create(_[&amp;quot;from&amp;quot;] = from2, _[&amp;quot;to&amp;quot;] = to2);
  df.attr(&amp;quot;class&amp;quot;) = &amp;quot;data.frame&amp;quot;;
  df.attr(&amp;quot;row.names&amp;quot;) = seq(1, ctr);
  return df;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;benchmark&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;bench::mark()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To compare the three previously described functions, I’ve used the &lt;a href=&#34;http://bench.r-lib.org/&#34;&gt;{bench}&lt;/a&gt; package. The code and numeric results are printed below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## from and to vectors
from &amp;lt;- d$user_id
to &amp;lt;- d$mentions_user_id

## perform bench mark
m &amp;lt;- bench::mark(
  unroll_connections1 = unroll_connections1(d),
  unroll_connections2 = unroll_connections2(d),
  unroll_connections3 = unroll_connections3(from, to),
  relative = TRUE,
  min_iterations = 100
)

## print results
m %&amp;gt;%
  dplyr::select(expression:n_gc) %&amp;gt;%
  knitr::kable(digits = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;expression&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;median&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;itr/sec&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mem_alloc&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_gc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;unroll_connections1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;472.14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;462.66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;460.84&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;unroll_connections2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;631.74&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;unroll_connections3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;462.66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, the initial improvement from &lt;code&gt;unroll_connections1()&lt;/code&gt; to &lt;code&gt;unroll_connections2()&lt;/code&gt; was more than &lt;strong&gt;60X&lt;/strong&gt;, which is great. But, thanks to the power of &lt;a href=&#34;https://http://www.rcpp.org/&#34;&gt;{rcpp}&lt;/a&gt;, I was able to speed things up even more with an improvement from &lt;code&gt;unroll_connections2()&lt;/code&gt; to &lt;code&gt;unroll_connections3()&lt;/code&gt; of roughly &lt;strong&gt;7X&lt;/strong&gt; or roughly &lt;strong&gt;450X&lt;/strong&gt; compared to the original function!!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## plot
m$expression &amp;lt;- factor(m$expression, levels = rev(m$expression))
bench:::autoplot.bench_mark(m, shape = 21, size = 2.5, color = &amp;quot;#333333aa&amp;quot;) +
  ggplot2::aes(fill = expression) +
  dataviz::theme_mwk() +
  ggplot2::theme(legend.position = &amp;quot;none&amp;quot;,
    plot.caption = ggplot2::element_text(family = &amp;quot;Roboto Condensed&amp;quot;)) +
  ggplot2::labs(x = NULL, y = &amp;quot;Time (mean task completion)&amp;quot;,
    title = &amp;quot;Benchmarking Twitter-to-network data wrangling functions&amp;quot;,
    subtitle = &amp;quot;Comparing base R and Rcpp functions for converting Twitter data into network-friendly objects&amp;quot;,
    caption = &amp;quot;unroll_connections1() and unroll_connections2() are written in base R; unroll_connections3() uses Rcpp&amp;quot;) +
  ggplot2::ggsave(here::here(&amp;quot;content&amp;quot;, &amp;quot;post&amp;quot;, &amp;quot;img&amp;quot;, &amp;quot;network-benchmark.png&amp;quot;),
    width = 7, height = 4, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/network-benchmark.png&#34;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Data I used to generate the example data set:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## search for up to 200 #rstats tweets from verified users
rt &amp;lt;- rtweet::search_tweets(&amp;quot;#rstats filter:verified&amp;quot;, n = 200)

## select only the node (ID/screen name) variables
d &amp;lt;- dplyr::select(d, user_id, mentions_user_id)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Installing R and Studio</title>
      <link>/post/2018-10-19-installing-r-and-studio/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-10-19-installing-r-and-studio/</guid>
      <description>&lt;p&gt;This post describes how to download and perform a basic local install of R
and Rstudio. The instructions should work for both macOS and Windows users. Although
not required, installation tends to work best when operating systems are
up-to-date. At the time of writing, this means R/Rstudio work best with
macOS High Sierra and Windows 10.&lt;/p&gt;
&lt;div id=&#34;r-vs-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R vs Rstudio&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt; is a statistical computing language/environment. It &lt;strong&gt;is distinct from
Rstudio&lt;/strong&gt;, which is an integrated development environment (IDE) or high-
powered graphical user interface (GUI) optimized for working with the R
language. In other words, R is the engine, and Rstudio is the interface.
Consequently, you’ll need to install &lt;em&gt;both&lt;/em&gt; R &lt;em&gt;and&lt;/em&gt; Rstudio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;download-and-install-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Download and install R&lt;/h2&gt;
&lt;p&gt;Use the following instructions to download and install the R statistical
computing language/environment:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to the CRAN (Collective R Archive Network) website: &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;
&lt;img src=&#39;./img/install-r2.png&#39;&gt;&lt;/li&gt;
&lt;li&gt;Click on the appropriate operating system (Mac or Windows) to navigate to download page.&lt;/li&gt;
&lt;li&gt;Download the most recent version of R.
&lt;ul&gt;
&lt;li&gt;If Mac, select the first &lt;code&gt;.pkg&lt;/code&gt; file listed in the “files” section. At time of writing, this is version &lt;strong&gt;&lt;code&gt;R-3.5.1.pkg&lt;/code&gt;&lt;/strong&gt;.
&lt;img src=&#39;./img/install-r-mac.png&#39;&gt;&lt;/li&gt;
&lt;li&gt;If Windows, select the bold, underline link written as &lt;strong&gt;‘install R for the first time’&lt;/strong&gt;.
&lt;img src=&#39;./img/install-r-windows.png&#39;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Double click (run) the downloaded file (check your &lt;code&gt;Downloads&lt;/code&gt; folder). Click yes through prompts to install like any other program (default values should be okay). You &lt;em&gt;may&lt;/em&gt; get a warning about the source of the download being unkown. Do whatever you can to allow the installation to continue—I promise the R pkg file is safe!&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;download-and-install-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Download and install Rstudio&lt;/h2&gt;
&lt;p&gt;Rstudio is an integrated development environment (IDE) that makes it easy to
use R. Once both R and Rstudio are installed, I’d actually recommend ignoring
the actual “R” program and instead only open and use Rstudio, which will
automatically call and allow interactive use of R.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to the free download location on Rstudio’s website: &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/#download&#34; class=&#34;uri&#34;&gt;https://www.rstudio.com/products/rstudio/download/#download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select one of the highlighted options that corresponds with your computer’s operating system (Mac or PC)
&lt;img src=&#39;./img/install-rstudio2.png&#39;&gt;&lt;/li&gt;
&lt;li&gt;Double (run) click the downloaded file (check &lt;code&gt;Downloads&lt;/code&gt; folder). Click yes through prompts to install like any other program (the defaults should be fine). You may get a warning about the source of the download being unkown. Do whatever you can to allow the installation to continue—I promise the R pkg file is safe!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For an actual demonstration of installing R and Rstudio using these
instructions, see the appropriate video for your operating system below.&lt;/p&gt;
&lt;div id=&#34;download-and-install-r-rstudio-on-a-mac&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Download and install R &amp;amp; Rstudio on a Mac&lt;/h3&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/K9ByVDx0eRM&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;download-and-install-r-rstudio-on-a-pc-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Download and install R &amp;amp; Rstudio on a PC (Windows)&lt;/h2&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/8INfvKR4uqw&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div&gt;

&lt;/div&gt;
&lt;div id=&#34;using-rrstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using R/Rstudio&lt;/h2&gt;
&lt;p&gt;You should be able to find the &lt;strong&gt;&lt;code&gt;Rstudio&lt;/code&gt;&lt;/strong&gt; application in your computer’s &lt;code&gt;Application&lt;/code&gt; or &lt;code&gt;Program&lt;/code&gt; folder. Alternatively, a simple search for “Rstudio” using finder/spotlight or the Windows key should be able to locate “Rstudio”
on your machine.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>My R-bloggers post</title>
      <link>/post/2018-10-18-my-r-bloggers-post/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-10-18-my-r-bloggers-post/</guid>
      <description>&lt;p&gt;I have long been a fan of &lt;a href=&#34;https://r-bloggers.com&#34;&gt;R-bloggers&lt;/a&gt;, a content
aggregating site focused on blog posts about R. It serves a useful
purpose&lt;sup&gt;1&lt;/sup&gt; and has considerable reach.&lt;sup&gt;2&lt;/sup&gt; But in the first
version of this blog post, I actually wrote a lengthy critique of the site where
I concluded with a not-so-blunt suggestion that R-bloggers wasn’t as good as it
should be. In retrospect, and after pleasant exchange about a draft of the post with
&lt;a href=&#34;https://www.r-bloggers.com/author/rlover/&#34;&gt;Tal Galili&lt;/a&gt; (the creator and
operator of &lt;a href=&#34;https://www.r-statistics.com/about/&#34;&gt;R-bloggers&lt;/a&gt;), I can
confidently say my post was overly nit-picky and unrealistic in my expectations
for a benevolent blog-aggregating site like R-bloggers.&lt;/p&gt;
&lt;div id=&#34;background-on-r-bloggers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background on R-bloggers&lt;/h2&gt;
&lt;p&gt;As I already mentioned, R-bloggers is an R-related content aggregating site that
circulates and indexes blog posts about R. It was created, as far as I can tell,
in 2005 by &lt;a href=&#34;https://www.r-bloggers.com/author/rlover/&#34;&gt;Tal Galili&lt;/a&gt;, who is,
impressively, still listed as the sole maintainer of the site–though it also
appears to be affiliated with the
&lt;a href=&#34;http://www.foastat.org/&#34;&gt;Foundation for Open Access Statistics (FOAS)&lt;/a&gt;, so,
hopefully, they provide Tal with some support.&lt;/p&gt;
&lt;p&gt;As for its mission and a description of its basic operations, here’s the
explanation straight from R-bloggers’
&lt;a href=&#34;https://www.r-bloggers.com/about/&#34;&gt;about section&lt;/a&gt;:&lt;/p&gt;
&lt;figure&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img style=&#34;max-width:600px&#34; src=&#34;./img/r-bloggers-what.png&#34; &gt;
&lt;/p&gt;
&lt;figcaption&gt;
Figure: Screen shot of R-bloggers description/operation
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And here’s the explanation of what R-bloggers offers to bloggers:&lt;/p&gt;
&lt;figure&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img style=&#34;max-width:600px&#34; src=&#34;./img/r-bloggers-contribution.png&#34; &gt;
&lt;/p&gt;
&lt;figcaption&gt;
Figure: Screen shot of R-bloggers contribution description
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Anyone interested in adding their blog to the R-bloggers feed is also
provided with a &lt;a href=&#34;https://www.r-bloggers.com/add-your-blog/&#34;&gt;link containing instructions and a submission form for adding
a blog to R-bloggers&lt;/a&gt;. The
&lt;a href=&#34;https://www.r-bloggers.com/add-your-blog/&#34;&gt;guidelines for bloggers&lt;/a&gt; are
quite reasonable–blog posts should be about R, include a minimum amount of
well-written non-code content (i.e., code snippets are not discouraged, but they
should be accompanied by text), contain reasonably reproducible examples/use
cases (if relevant), compatible HTML code, and a link back to R-bloggers, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-bloggers-contribution-to-rstats&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R-bloggers’ contribution to #rstats&lt;/h2&gt;
&lt;p&gt;Ultimately, the &lt;strong&gt;contribution&lt;/strong&gt; made by R-bloggers is not necessarily the &lt;em&gt;production&lt;/em&gt; of
content, but the &lt;em&gt;dissemination&lt;/em&gt; it. When one considers some of the difficulties
associated with running or automating this kind of service, it’s easy to
understand why the dissemination of R-related content is a valuable contribution.
But it’s perhaps even &lt;strong&gt;easier&lt;/strong&gt; to understand the value of its contribution by
actually trying to automate the process yourself…&lt;/p&gt;
&lt;p&gt;So, in addition to qualifying as my R-bloggers link, the goal of this post is
to create via automation a content-aggregating R-bloggers-like website.&lt;/p&gt;
&lt;div id=&#34;identifying-blogs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Identifying blogs&lt;/h3&gt;
&lt;p&gt;Without scraping the R-bloggers website, I was able to accumulate a large list
of R-related blogs by searching for tweets via &lt;a href=&#34;https://rtweet.info&#34;&gt;rtweet&lt;/a&gt;
containing R-related keywords and URLs that matched at least one of two common
blog post conventions (&lt;code&gt;/post/&lt;/code&gt; or &lt;code&gt;2018/\\d{2}/&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## build search query with URL filters
m &amp;lt;- substr(Sys.Date(), 6, 7)
sq &amp;lt;- glue::glue(
  &amp;#39;(rstats OR tidyverse OR &amp;quot;R package&amp;quot;) (url:post OR url:2018/{m})&amp;#39;)

## search for most recent 100 matching tweets
rt &amp;lt;- rtweet::search_tweets(sq, n = 100)

## print URLs
rt %&amp;gt;%
  pull(urls_expanded_url) %&amp;gt;%
  unlist() %&amp;gt;%
  tfse::na_omit() %&amp;gt;%
  unique()
#&amp;gt; [1] &amp;quot;https://figshare.com/articles/RCCPII_Data/7928480&amp;quot;                     
#&amp;gt; [2] &amp;quot;http://thug-r.life/post/2019-04-03-tale-of-three-assignment-operators/&amp;quot;
#&amp;gt; [3] &amp;quot;https://buff.ly/2UHhohr&amp;quot;                                               
#&amp;gt; [4] &amp;quot;http://bit.ly/learning-lab-07&amp;quot;                                         
#&amp;gt; [5] &amp;quot;http://bit.ly/lstm-time-series&amp;quot;                                        
#&amp;gt; [6] &amp;quot;https://tenet-rccpii.github.io/rccpii-2018/&amp;quot;                           
#&amp;gt; [7] &amp;quot;https://carpentries.org/blog/2019/04/rccpii/&amp;quot;                          
#&amp;gt; [8] &amp;quot;https://nemethc.com/post/2019-04-05-seattle-bike-trafic/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;automating-a-website&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Automating a website&lt;/h2&gt;
&lt;p&gt;Then, after using &lt;a href=&#34;https://rvest.r-lib.org&#34;&gt;rvest&lt;/a&gt; to extract post information
and text previews from RSS feeds, I was able to automate, with the help of
&lt;a href=&#34;https://blogdown.rstudio.com&#34;&gt;blogdown&lt;/a&gt;, a continuously updating website with a
feed containing linked post previews. It took a good amount of elbow grease,
but, at least initially, the task seemed surprisingly doable. I was so confident
in my ability to automate an R-bloggers-like website, I even decided to expand
the aim of my content aggregating feed to be about data-science generally–hence,
the name, &lt;code&gt;data-scribers&lt;/code&gt;. You can see the site for yourself at
&lt;a href=&#34;https://data-scribers.mikewk.com&#34;&gt;data-scribers.mikewk.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;no-match-for-r-bloggers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;No match for R-bloggers&lt;/h2&gt;
&lt;p&gt;While the initial outcome appeared to be a resounding success, it wasn’t long
before I realized the difficulties involved in pruning (e.g., cutting off text,
including/not including code chunks, dealing with inconsistent formats, etc.),
filtering (e.g., on-topic, non-trivial, consistent language, original content,
non-reposts, etc.), and maintaining (checking/updating/editing algorithm,
tagging posts, creating searchable and/or organized archive, etc.) a site like
R-bloggers would be a lot of work. In fact, since launching
&lt;a href=&#34;https://data-scribers.mikewk.com&#34;&gt;data-scribers&lt;/a&gt;, the site has started to take
on a life of its own; the range of topics and languages keep growing, and, at
this point, I’m more interested to see where it goes than I am in investing
additional time ensuring the feed only contains English posts, filtering via
some overly-strict definition of data-science, battling with HTML formatting
issues, etc.&lt;/p&gt;
&lt;p&gt;Of course, even if I had time to prune, filter, and maintain the feed of post
previews, to truly be competitive with R-bloggers, I’d also have to add numerous
other features (visuals, linked tags, search bar, etc.)–and &lt;strong&gt;even then&lt;/strong&gt; the
site wouldn’t include any integration with R-related advertisement opportunities
or job postings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; R-bloggers is a centralized directory of “over 750” R-related blogs&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; At the time of writing, the site has 50k email subscribers, 60k+
Twitter followers, etc.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Labelling dataviz</title>
      <link>/post/2018-09-20-labelling-dataviz/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-20-labelling-dataviz/</guid>
      <description>&lt;p&gt;I still remember how hard it was to learn &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;{ggplot2}&lt;/a&gt;
after only knowing a little about R&lt;sup&gt;1&lt;/sup&gt;. Sure, the plots seemed pretty.
But compared to the ways I had used R before, &lt;code&gt;{ggplot2}&lt;/code&gt;’s syntax seemed almost
counter-intuitive. Its pipe-like &lt;code&gt;+&lt;/code&gt; workflow–building layer-by-layer–
was like nothing I had ever used before. Not to mention, I was unfamiliar
with central terms of art like “&lt;code&gt;geom&lt;/code&gt;s” and “&lt;code&gt;aes&lt;/code&gt;thetics”.&lt;/p&gt;
&lt;p&gt;But then again…the plots were &lt;strong&gt;really pretty&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately for me, &lt;em&gt;being able to generate pretty plots&lt;/em&gt; was a powerful
motivator. Because not long after committing myself to learning how to &lt;code&gt;{ggplot2}&lt;/code&gt;,
I realized why everyone likes it so much–it’s actually really
easy! Once I learned about the key building blocks of &lt;code&gt;ggplot()&lt;/code&gt;, &lt;code&gt;aes()&lt;/code&gt;,
and &lt;code&gt;geom_.*()&lt;/code&gt;), I could create pretty plots for all sorts of data types and
relationships.&lt;/p&gt;
&lt;div id=&#34;its-in-the-details&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;It’s in the details&lt;/h3&gt;
&lt;p&gt;Over time my &lt;a href=&#34;https://twitter.com/search?q=%23rstats%20%23dataviz&amp;amp;src=typed_query&amp;amp;f=image&#34;&gt;#dataviz&lt;/a&gt;
has &lt;a href=&#34;https://twitter.com/kearneymw/status/762833157578162180/photo/1&#34;&gt;gotten&lt;/a&gt; a lot &lt;a href=&#34;https://twitter.com/kearneymw/status/1040702237310365701/photo/1&#34;&gt;better&lt;/a&gt;, but it’s had very little
to do the actual plotting of data points (&lt;code&gt;{ggplot2}&lt;/code&gt; outputs beautiful plots by
default). Instead, my dataviz has improved because I learned how to (a) more
effectively label scales, data points, and other dimensions of a plot and (b)
(re)size and save high-resolution plots using nice-looking fonts.&lt;/p&gt;
&lt;p&gt;With this in mind, my goal with this post is to demonstrate how data
visualizations can be improved via proper labelling. And since this idea was
inspired by my &lt;a href=&#34;../2018-09-17-tick-marks-var-names-and-ggplot2&#34;&gt;last post&lt;/a&gt;,
I will extend the example about the relationship between miles per gallon and
number of cylinders. If you read the setup section from the last post, you can
skip ahead (it’s the same).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To follow along with the examples in this post, you will need to load the
&lt;a href=&#34;https://tidyverse.org&#34;&gt;{tidyverse}&lt;/a&gt; set of packages and define a couple stylistic
functions used throughout to make the plots even prettier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load tidyverse
library(tidyverse)
#&amp;gt; ── Attaching packages ───────────────────────────────────────────────────── tidyverse 1.2.1 ──
#&amp;gt; ✔ ggplot2 3.0.0.9000     ✔ purrr   0.2.5     
#&amp;gt; ✔ tibble  1.4.2          ✔ dplyr   0.7.6     
#&amp;gt; ✔ tidyr   0.8.1          ✔ stringr 1.3.1     
#&amp;gt; ✔ readr   1.1.1          ✔ forcats 0.3.0
#&amp;gt; ── Conflicts ──────────────────────────────────────────────────────── tidyverse_conflicts() ──
#&amp;gt; ✖ dplyr::filter() masks stats::filter()
#&amp;gt; ✖ dplyr::lag()    masks stats::lag()

## create style theme
my_theme &amp;lt;- function() {
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;) + 
    theme(plot.title = element_text(size = rel(1.5), face = &amp;quot;bold&amp;quot;), 
      plot.subtitle = element_text(size = rel(1.1)),
      plot.caption = element_text(color = &amp;quot;#777777&amp;quot;, vjust = 0),
      axis.title = element_text(size = rel(.9), hjust = 0.95, face = &amp;quot;italic&amp;quot;),
      panel.grid.major = element_line(size = rel(.1), color = &amp;quot;#000000&amp;quot;), 
      panel.grid.minor = element_line(size = rel(.05), color = &amp;quot;#000000&amp;quot;), 
      legend.position = &amp;quot;none&amp;quot;)
}
my_labs &amp;lt;- function() {
  labs(title = &amp;quot;Average miles per gallon by number of cylinders&amp;quot;, 
    subtitle = &amp;quot;Scatter plot depicting average miles per gallon aggregated by number of cylinders&amp;quot;,
    x = &amp;quot;Number of cylinders&amp;quot;, y = &amp;quot;Miles per gallon&amp;quot;,
    caption = &amp;quot;Source: Estimates calculated from the &amp;#39;mtcars&amp;#39; data set&amp;quot;)
}
my_save &amp;lt;- function(file) {
  ggsave(file, width = 7, height = 4.5, units = &amp;quot;in&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set featured in this post is &lt;strong&gt;mtcars&lt;/strong&gt;, which is bundled as part of
the core &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html&#34;&gt;datasets&lt;/a&gt;
package. Specifically, examples will feature the &lt;code&gt;mpg&lt;/code&gt; (miles per gallon)
and &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## print first six rows
head(mtcars)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;labelling-dataviz&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Labelling dataviz&lt;/h2&gt;
&lt;p&gt;I think most would agree a &lt;em&gt;good&lt;/em&gt; data visualization clearly
conveys a pattern (or lack of pattern) while being easy to understand, while a
&lt;em&gt;great&lt;/em&gt; data visualization conveys a pattern (or lack of pattern) while
being easy to understand &lt;strong&gt;and aesthetically pleasing&lt;/strong&gt;. The difference between
&lt;em&gt;good&lt;/em&gt; and &lt;em&gt;great&lt;/em&gt; can be something as minor as color palette, but, in my
experience, more often than not the only difference between a good visualization
and great visualizations is labelling.&lt;/p&gt;
&lt;p&gt;In my last post, for example, the first successful plot of &lt;code&gt;mpg&lt;/code&gt; by &lt;code&gt;cyl&lt;/code&gt; was
only &lt;em&gt;okay&lt;/em&gt;–it’s a little bland and it uses an actual expression for an axis title.&lt;/p&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/tick-marks.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;But then I replaced the expression and added a custom theme and a few more labels,
and I think it started to border on being &lt;em&gt;good&lt;/em&gt;.&lt;/p&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/with-labs.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The combination of style changes and labels clearly made a big difference but, still,
I don’t think the above plot is mind-blowing or overly impressive.&lt;/p&gt;
&lt;p&gt;Since there aren’t &lt;em&gt;that&lt;/em&gt; many data points, I think this visualization can be
further improved–with the help of &lt;a href=&#34;https://github.com/slowkow/ggrepel&#34;&gt;&lt;code&gt;{ggrepel}&lt;/code&gt;&lt;/a&gt;–by
labelling the individual data points–either as an additional layer or as a
standalone plot (I didn’t think the summarized &lt;code&gt;cyl&lt;/code&gt; estimates added much so I
dropped the mean line/points).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## - add row names as make variable
## - add noise to cyl for spacing (store as cyl2)
## - plot and format labels with ggrepel
## - adjust x-axis labels
## - specify custom fill colors
mtcars %&amp;gt;%
  mutate(make = row.names(mtcars),
    cyl2 = case_when(
      cyl == 4 ~ cyl - runif(1, .25, .5),
      cyl == 6 ~ cyl - runif(1, .00, .1),
      cyl == 8 ~ cyl + runif(1, .75, 1.25), 
      TRUE ~ cyl
    )) %&amp;gt;%
  ggplot(aes(x = cyl2, y = mpg)) + 
  ggrepel::geom_label_repel(aes(fill = factor(cyl), label = make), 
    family = &amp;quot;Roboto Condensed Light&amp;quot;, label.padding = 0.2, label.size = .25, 
    min.segment.length = 100, color = &amp;quot;black&amp;quot;, size = 3.4) + 
  my_theme() + 
  my_labs() + 
  scale_x_continuous(breaks = c(4, 6, 8)) + 
  scale_fill_manual(values = c(&amp;quot;#efd0ef&amp;quot;, &amp;quot;#d0efd0&amp;quot;, &amp;quot;#d0daef&amp;quot;)) +
  my_save(&amp;quot;img/tick-marks-final.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/tick-marks-final.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;As you can see in the code chunk above, I also added some additional noise to
the &lt;code&gt;cyl&lt;/code&gt; variable to help out &lt;code&gt;{ggrepel}&lt;/code&gt;’s spacing algorithm. The approach
made it possible to plot &lt;em&gt;and label&lt;/em&gt; each car in the data set without overloading
or distracting the image with too much information. So, now, not only does the
image convey the pattern between &lt;code&gt;mpg&lt;/code&gt; and &lt;code&gt;cyl&lt;/code&gt;, but it does so in a way that
more people can recognize ( &lt;em&gt;4-cylinders&lt;/em&gt; is less meaningful than &lt;em&gt;Honda Civic&lt;/em&gt;, for example),
while arguably being even more visually pleasing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I knew just enough to read in data,
do some &lt;a href=&#34;http://lavaan.ugent.be/&#34;&gt;structural equation modeling&lt;/a&gt;, and
generate some simple plots via &lt;code&gt;base::plot()&lt;/code&gt; and &lt;code&gt;base::histogram()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Tick marks, variable names, and ggplot2</title>
      <link>/post/2018-09-17-tick-marks-var-names-and-ggplot2/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-17-tick-marks-var-names-and-ggplot2/</guid>
      <description>&lt;p&gt;A popular workflow in R uses &lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;{dplyr}&lt;/a&gt; to &lt;code&gt;group_by()&lt;/code&gt;
and then &lt;code&gt;summarise()&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt; variables.
It’s an intuitive and easy way to aggregate and describe data, especially along
multiple dimensions. The cost of being both powerful and user-friendly,
however, is its arguably inconvenient default method for assigning names to
summarized values. As the code illustrates below, users can provide their own
names when using &lt;code&gt;summarize()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## explicitly named summarize variable
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mpg = mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl   mpg
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4  26.7
#&amp;gt; 2     6  19.7
#&amp;gt; 3     8  15.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when users don’t explicitly name the summarized values, instead of inheriting
the name of a summarized variable (in this case &lt;code&gt;mpg&lt;/code&gt;), variables are named–by
default–with the text of the expression used to create the summarized value.&lt;/p&gt;
&lt;p&gt;For example, the code below summarizes by estimating the mean &lt;code&gt;mpg&lt;/code&gt; for cars
grouped by number of &lt;code&gt;cyl&lt;/code&gt;. The code is fairly straight forward, and you can
probably see why users often assume the returned summarized data would contain
two variables &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mpg&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## unnamed summarize variable
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl `mean(mpg)`
#&amp;gt;   &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4        26.7
#&amp;gt; 2     6        19.7
#&amp;gt; 3     8        15.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But as you can see, the variable names wind up being &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mean(mpg)&lt;/code&gt;–
instead of simply &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mpg&lt;/code&gt;. This default behavior may seem obnoxious at
first, but it makes a lot of sense when you think about using &lt;strong&gt;two or more&lt;/strong&gt;
variables when calculating &lt;code&gt;summarize()&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;Regardless, while it’s definitely a good idea to provide your own summary
variable names, you will invariably find yourself in a situation where you
would like to plot summarized variables that were named using the text of
the expressions used to create them.&lt;/p&gt;
&lt;p&gt;Thus, my goal with this post is to identify &lt;strong&gt;three common mistakes users make when attempting to map variables&lt;/strong&gt; from &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise.html&#34;&gt;&lt;code&gt;dplyr::summarize()&lt;/code&gt;&lt;/a&gt;
to aesthetic dimensions of a plot with &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;{ggplot2}&lt;/a&gt;
and conclude by describing a solution.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To follow along with the examples in this post, you will need to load the
&lt;a href=&#34;https://tidyverse.org&#34;&gt;{tidyverse}&lt;/a&gt; set of packages and define a couple stylistic
functions used throughout to make the plots even prettier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load tidyverse
library(tidyverse)
#&amp;gt; ── Attaching packages ───────────────────────────────────────────────────── tidyverse 1.2.1 ──
#&amp;gt; ✔ ggplot2 3.0.0.9000     ✔ purrr   0.2.5     
#&amp;gt; ✔ tibble  1.4.2          ✔ dplyr   0.7.6     
#&amp;gt; ✔ tidyr   0.8.1          ✔ stringr 1.3.1     
#&amp;gt; ✔ readr   1.1.1          ✔ forcats 0.3.0
#&amp;gt; ── Conflicts ──────────────────────────────────────────────────────── tidyverse_conflicts() ──
#&amp;gt; ✖ dplyr::filter() masks stats::filter()
#&amp;gt; ✖ dplyr::lag()    masks stats::lag()

## create style theme
my_theme &amp;lt;- function() {
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;) + 
    theme(plot.title = element_text(size = rel(1.5), face = &amp;quot;bold&amp;quot;), 
      plot.subtitle = element_text(size = rel(1.1)),
      plot.caption = element_text(color = &amp;quot;#777777&amp;quot;, vjust = 0),
      axis.title = element_text(size = rel(.9), hjust = 0.95, face = &amp;quot;italic&amp;quot;),
      panel.grid.major = element_line(size = rel(.1), color = &amp;quot;#000000&amp;quot;), 
      panel.grid.minor = element_line(size = rel(.05), color = &amp;quot;#000000&amp;quot;), 
      legend.position = &amp;quot;none&amp;quot;)
}
my_labs &amp;lt;- function() {
  labs(title = &amp;quot;Average miles per gallon by number of cylinders&amp;quot;, 
    subtitle = &amp;quot;Scatter plot depicting average miles per gallon aggregated by number of cylinders&amp;quot;,
    x = &amp;quot;Number of cylinders&amp;quot;, y = &amp;quot;Miles per gallon&amp;quot;,
    caption = &amp;quot;Source: Estimates calculated from the &amp;#39;mtcars&amp;#39; data set&amp;quot;)
}
my_save &amp;lt;- function(file) {
  ggsave(file, width = 7, height = 4.5, units = &amp;quot;in&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set featured in this post is &lt;strong&gt;mtcars&lt;/strong&gt;, which is bundled as part of
the core &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html&#34;&gt;datasets&lt;/a&gt;
package. Specifically, examples will feature the &lt;code&gt;mpg&lt;/code&gt; (miles per gallon)
and &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## print first six rows
head(mtcars)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-incorrect-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapping incorrect names&lt;/h2&gt;
&lt;p&gt;When visualizing data with &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;, one of the
first and most important steps entails mapping observed variables in the data
set to the aesthetic dimensions of a plot. But aesthetic mapping will only work as
expected when you provide the correct names via &lt;code&gt;ggplot2::aes()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following section describes three common mistakes users make that result in
the mapping of incorrect names.&lt;/p&gt;
&lt;div id=&#34;assuming-a-statistic-inherits-the-name-of-a-variable.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1. Assuming a statistic inherits the name of a variable.&lt;/h3&gt;
&lt;p&gt;A common mistake is to assume that summarizing via &lt;code&gt;mean()&lt;/code&gt; or &lt;code&gt;median()&lt;/code&gt;
results in a variable with the same name. For example, if we summarize the mean
of &lt;code&gt;mpg&lt;/code&gt; like we did above, i.e., &lt;code&gt;summarize(mean(mpg))&lt;/code&gt;, and then try to map
&lt;code&gt;y = mpg&lt;/code&gt;, we get an error because “mpg” doesn’t exist.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## this gets an error because there is no variable named &amp;quot;mpg&amp;quot;
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = mpg)) + 
  geom_point() + 
  geom_line()
#&amp;gt; Error: Aesthetics must be either length 1 or the same as the data (3): x, y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We know from the &lt;strong&gt;summarize&lt;/strong&gt; section above the variable’s name is actually
&lt;code&gt;mean(mpg)&lt;/code&gt;. As this example illustrates, it is incorrect to assume that
summarized estimates inherit the name of the variable they summarize. This may
seem annoying at first, but it makes sense when you think about times when you
may want to summarize using &lt;strong&gt;two or more variables&lt;/strong&gt; in the data set.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;repeating-the-expression-used-in-summarize.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2. Repeating the expression used in &lt;code&gt;summarize()&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;A second common mistake is to assume that you can simply repeat the expression
used in &lt;code&gt;summarize()&lt;/code&gt; when specifying aesthetic mappings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## this also doesn&amp;#39;t work because it tries to caculate the mean of mpg
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = mean(mpg))) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/empty-plot.png&amp;quot;)
#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_point).
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_path).
#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_point).
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_path).&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/empty-plot.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The result is a handful of warnings and an empty plot. The above code fails
because it tries to calculate mean of &lt;code&gt;mpg&lt;/code&gt;, which, again, doesn’t exist in the
summarized data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passing-the-expression-as-a-quoted-string.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3. Passing the expression as a quoted string.&lt;/h3&gt;
&lt;p&gt;The third common mistake is to treat the summarized expression name as a string.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## if we put quotes around it, it assumes it&amp;#39;s a string
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = &amp;quot;mean(mpg)&amp;quot;)) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/static-y.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/static-y.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;This time we get a plot and no warnings, but it’s clearly not right. It shows
every &lt;code&gt;y&lt;/code&gt; value is exactly the same, but it seems far fetched to think the
average miles per gallon would not vary with number of cylinders.&lt;/p&gt;
&lt;p&gt;In this case, the literal string &lt;code&gt;&amp;quot;mean(mpg)&amp;quot;&lt;/code&gt; is mapped to the &lt;code&gt;y&lt;/code&gt; variable
value, which means it’s converted to a factor and the single factor level is
coded as &lt;code&gt;1&lt;/code&gt; at each observation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solution-use-tick-marks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solution: use tick marks&lt;/h2&gt;
&lt;p&gt;At this point it should be clear the name of the summarized &lt;code&gt;mpg&lt;/code&gt; variable is
actually “mean(mpg),” only now we also know wrapping the expression with quotes
doesn’t work because it assumes the expression is a literal string, not a
variable name.&lt;/p&gt;
&lt;p&gt;The solution to correctly mapping unnamed &lt;code&gt;summarize()&lt;/code&gt; variables is to use
tick marks–the apostrophe-like symbol at the top-left of your keyboard. Tick
marks work a lot like quotes insofar as they open and close and wrap all
elements into a single object. The difference is tick marks assume the marked
object references a symbol. To illustrate, the code below assigns 10 random
numbers to &lt;code&gt;x&lt;/code&gt; and then prints it using both ticks and quotes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## assign 10 random numbers to x
x &amp;lt;- rnorm(10)

## print x wrapped in quotes
&amp;quot;x&amp;quot;
#&amp;gt; [1] &amp;quot;x&amp;quot;

## print x wrapped in tick marks
`x`
#&amp;gt;  [1] -0.4614799  0.9832479 -1.7872899  0.2977996  0.1209820  1.3454420
#&amp;gt;  [7] -0.6433342  0.4772910  1.8410117  0.0823669&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, really, tick marks are used to distinguish symbols that contain one or more
unfriendly punctuation/characters, e.g., parenthesis, dashes, spaces, etc.&lt;/p&gt;
&lt;p&gt;With this knowledge, we can now fix the featured &lt;code&gt;summarize()&lt;/code&gt; example by
wrapping the summarized expression, which functions as the name of the
summarized variable, in tick marks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## if we put quotes around it, aes() assumes we are entering a string
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = `mean(mpg)`)) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/tick-marks.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/tick-marks.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Of course, most audiences don’t really want to see expression text on a plot,
so we can improve this plot by adding some better labels and a custom theme via
the previously defined &lt;code&gt;my_theme()&lt;/code&gt; and &lt;code&gt;my_labs()&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## use tick marks instead of quotes to indicate variable name
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = `mean(mpg)`)) + 
  geom_point() + 
  geom_line() + 
  my_theme() + 
  my_labs() + 
  my_save(&amp;quot;img/with-labs.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;./img/with-labs.png&#34;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; toward the end of &lt;code&gt;summarise()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt;
are interchangeable.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
