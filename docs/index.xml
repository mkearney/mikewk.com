<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael W. Kearney</title>
    <link>https://mikewk.com/</link>
    <description>Recent content on Michael W. Kearney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© Michael W. Kearney 2018</copyright>
    <lastBuildDate>Thu, 20 Sep 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mikewk.com/index.xml" rel="self" type="application/rss+xml" />
    
    

    <item>
      <title>Labelling dataviz</title>
      <link>https://mikewk.com/post/2018-09-20-labelling-dataviz/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mikewk.com/post/2018-09-20-labelling-dataviz/</guid>
      <description>&lt;p&gt;I still remember how hard it was to learn &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;{ggplot2}&lt;/a&gt;
after only knowing a little about R&lt;sup&gt;1&lt;/sup&gt;. Sure, the plots seemed pretty.
But compared to the ways I had used R before, &lt;code&gt;{ggplot2}&lt;/code&gt;’s syntax seemed almost
counter-intuitive. Its pipe-like &lt;code&gt;+&lt;/code&gt; workflow–building layer-by-layer–
was like nothing I had ever used before. Not to mention, I was unfamiliar
with central terms of art like “&lt;code&gt;geom&lt;/code&gt;s” and “&lt;code&gt;aes&lt;/code&gt;thetics”.&lt;/p&gt;
&lt;p&gt;But then again…the plots were &lt;strong&gt;really pretty&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately for me, &lt;em&gt;being able to generate pretty plots&lt;/em&gt; was a powerful
motivator. Because not long after committing myself to learning how to &lt;code&gt;{ggplot2}&lt;/code&gt;,
I realized why everyone likes it so much–it’s actually really
easy! Once I learned about the key building blocks of &lt;code&gt;ggplot()&lt;/code&gt;, &lt;code&gt;aes()&lt;/code&gt;,
and &lt;code&gt;geom_.*()&lt;/code&gt;), I could create pretty plots for all sorts of data types and
relationships.&lt;/p&gt;
&lt;div id=&#34;its-in-the-details&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;It’s in the details&lt;/h3&gt;
&lt;p&gt;Over time my &lt;a href=&#34;https://twitter.com/search?q=%23rstats%20%23dataviz&amp;amp;src=typed_query&amp;amp;f=image&#34;&gt;#dataviz&lt;/a&gt;
has &lt;a href=&#34;https://twitter.com/kearneymw/status/762833157578162180/photo/1&#34;&gt;gotten&lt;/a&gt; a lot &lt;a href=&#34;https://twitter.com/kearneymw/status/1040702237310365701/photo/1&#34;&gt;better&lt;/a&gt;, but it’s had very little
to do the actual plotting of data points (&lt;code&gt;{ggplot2}&lt;/code&gt; outputs beautiful plots by
default). Instead, my dataviz has improved because I learned how to (a) more
effectively label scales, data points, and other dimensions of a plot and (b)
(re)size and save high-resolution plots using nice-looking fonts.&lt;/p&gt;
&lt;p&gt;With this in mind, my goal with this post is to demonstrate how data
visualizations can be improved via proper labelling. And since this idea was
inspired by my &lt;a href=&#34;../2018-09-17-tick-marks-var-names-and-ggplot2&#34;&gt;last post&lt;/a&gt;,
I will extend the example about the relationship between miles per gallon and
number of cylinders. If you read the setup section from the last post, you can
skip ahead (it’s the same).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To follow along with the examples in this post, you will need to load the
&lt;a href=&#34;https://tidyverse.org&#34;&gt;{tidyverse}&lt;/a&gt; set of packages and define a couple stylistic
functions used throughout to make the plots even prettier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load tidyverse
library(tidyverse)
#&amp;gt; ── Attaching packages ───────────────────────────────────────────────────── tidyverse 1.2.1 ──
#&amp;gt; ✔ ggplot2 3.0.0.9000     ✔ purrr   0.2.5     
#&amp;gt; ✔ tibble  1.4.2          ✔ dplyr   0.7.6     
#&amp;gt; ✔ tidyr   0.8.1          ✔ stringr 1.3.1     
#&amp;gt; ✔ readr   1.1.1          ✔ forcats 0.3.0
#&amp;gt; ── Conflicts ──────────────────────────────────────────────────────── tidyverse_conflicts() ──
#&amp;gt; ✖ dplyr::filter() masks stats::filter()
#&amp;gt; ✖ dplyr::lag()    masks stats::lag()

## create style theme
my_theme &amp;lt;- function() {
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;) + 
    theme(plot.title = element_text(size = rel(1.5), face = &amp;quot;bold&amp;quot;), 
      plot.subtitle = element_text(size = rel(1.1)),
      plot.caption = element_text(color = &amp;quot;#777777&amp;quot;, vjust = 0),
      axis.title = element_text(size = rel(.9), hjust = 0.95, face = &amp;quot;italic&amp;quot;),
      panel.grid.major = element_line(size = rel(.1), color = &amp;quot;#000000&amp;quot;), 
      panel.grid.minor = element_line(size = rel(.05), color = &amp;quot;#000000&amp;quot;), 
      legend.position = &amp;quot;none&amp;quot;)
}
my_labs &amp;lt;- function() {
  labs(title = &amp;quot;Average miles per gallon by number of cylinders&amp;quot;, 
    subtitle = &amp;quot;Scatter plot depicting average miles per gallon aggregated by number of cylinders&amp;quot;,
    x = &amp;quot;Number of cylinders&amp;quot;, y = &amp;quot;Miles per gallon&amp;quot;,
    caption = &amp;quot;Source: Estimates calculated from the &amp;#39;mtcars&amp;#39; data set&amp;quot;)
}
my_save &amp;lt;- function(file) {
  ggsave(file, width = 7, height = 4.5, units = &amp;quot;in&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set featured in this post is &lt;strong&gt;mtcars&lt;/strong&gt;, which is bundled as part of
the core &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html&#34;&gt;datasets&lt;/a&gt;
package. Specifically, examples will feature the &lt;code&gt;mpg&lt;/code&gt; (miles per gallon)
and &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## print first six rows
head(mtcars)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;labelling-dataviz&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Labelling dataviz&lt;/h2&gt;
&lt;p&gt;I think most would agree a &lt;em&gt;good&lt;/em&gt; data visualization clearly
conveys a pattern (or lack of pattern) while being easy to understand, while a
&lt;em&gt;great&lt;/em&gt; data visualization conveys a pattern (or lack of pattern) while
being easy to understand &lt;strong&gt;and aesthetically pleasing&lt;/strong&gt;. The difference between
&lt;em&gt;good&lt;/em&gt; and &lt;em&gt;great&lt;/em&gt; can be something as minor as color palette, but, in my
experience, more often than not the only difference between a good visualization
and great visualizations is labelling.&lt;/p&gt;
&lt;p&gt;In my last post, for example, the first successful plot of &lt;code&gt;mpg&lt;/code&gt; by &lt;code&gt;cyl&lt;/code&gt; was
only &lt;em&gt;okay&lt;/em&gt;–it’s a little bland and it uses an actual expression for an axis title.&lt;/p&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;https://mikewk.com/img/tick-marks.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;But then I replaced the expression and added a custom theme and a few more labels,
and I think it started to border on being &lt;em&gt;good&lt;/em&gt;.&lt;/p&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;https://mikewk.com/img/with-labs.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The combination of style changes and labels clearly made a big difference but, still,
I don’t think the above plot is mind-blowing or overly impressive.&lt;/p&gt;
&lt;p&gt;Since there aren’t &lt;em&gt;that&lt;/em&gt; many data points, I think this visualization can be
further improved–with the help of &lt;a href=&#34;https://github.com/slowkow/ggrepel&#34;&gt;&lt;code&gt;{ggrepel}&lt;/code&gt;&lt;/a&gt;–by
labelling the individual data points–either as an additional layer or as a
standalone plot (I didn’t think the summarized &lt;code&gt;cyl&lt;/code&gt; estimates added much so I
dropped the mean line/points).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## - add row names as make variable
## - add noise to cyl for spacing (store as cyl2)
## - plot and format labels with ggrepel
## - adjust x-axis labels
## - specify custom fill colors
mtcars %&amp;gt;%
  mutate(make = row.names(mtcars),
    cyl2 = case_when(
      cyl == 4 ~ cyl - runif(1, .25, .5),
      cyl == 6 ~ cyl - runif(1, .00, .1),
      cyl == 8 ~ cyl + runif(1, .75, 1.25), 
      TRUE ~ cyl
    )) %&amp;gt;%
  ggplot(aes(x = cyl2, y = mpg)) + 
  ggrepel::geom_label_repel(aes(fill = factor(cyl), label = make), 
    family = &amp;quot;Roboto Condensed Light&amp;quot;, label.padding = 0.2, label.size = .25, 
    min.segment.length = 100, color = &amp;quot;black&amp;quot;, size = 3.4) + 
  my_theme() + 
  my_labs() + 
  scale_x_continuous(breaks = c(4, 6, 8)) + 
  scale_fill_manual(values = c(&amp;quot;#efd0ef&amp;quot;, &amp;quot;#d0efd0&amp;quot;, &amp;quot;#d0daef&amp;quot;)) +
  my_save(&amp;quot;img/tick-marks-final.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;https://mikewk.com/img/tick-marks-final.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;As you can see in the code chunk above, I also added some additional noise to
the &lt;code&gt;cyl&lt;/code&gt; variable to help out &lt;code&gt;{ggrepel}&lt;/code&gt;’s spacing algorithm. The approach
made it possible to plot &lt;em&gt;and label&lt;/em&gt; each car in the data set without overloading
or distracting the image with too much information. So, now, not only does the
image convey the pattern between &lt;code&gt;mpg&lt;/code&gt; and &lt;code&gt;cyl&lt;/code&gt;, but it does so in a way that
more people can recognize ( &lt;em&gt;4-cylinders&lt;/em&gt; is less meaningful than &lt;em&gt;Honda Civic&lt;/em&gt;, for example),
while arguably being even more visually pleasing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I knew just enough to read in data,
do some &lt;a href=&#34;http://lavaan.ugent.be/&#34;&gt;structural equation modeling&lt;/a&gt;, and
generate some simple plots via &lt;code&gt;base::plot()&lt;/code&gt; and &lt;code&gt;base::histogram()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Tick marks, variable names, and ggplot2</title>
      <link>https://mikewk.com/post/2018-09-17-tick-marks-var-names-and-ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikewk.com/post/2018-09-17-tick-marks-var-names-and-ggplot2/</guid>
      <description>&lt;p&gt;A popular workflow in R uses &lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;{dplyr}&lt;/a&gt; to &lt;code&gt;group_by()&lt;/code&gt;
and then &lt;code&gt;summarise()&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt; variables.
It’s an intuitive and easy way to aggregate and describe data, especially along
multiple dimensions. The cost of being both powerful and user-friendly,
however, is its arguably inconvenient default method for assigning names to
summarized values. As the code illustrates below, users can provide their own
names when using &lt;code&gt;summarize()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## explicitly named summarize variable
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mpg = mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl   mpg
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4  26.7
#&amp;gt; 2     6  19.7
#&amp;gt; 3     8  15.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when users don’t explicitly name the summarized values, instead of inheriting
the name of a summarized variable (in this case &lt;code&gt;mpg&lt;/code&gt;), variables are named–by
default–with the text of the expression used to create the summarized value.&lt;/p&gt;
&lt;p&gt;For example, the code below summarizes by estimating the mean &lt;code&gt;mpg&lt;/code&gt; for cars
grouped by number of &lt;code&gt;cyl&lt;/code&gt;. The code is fairly straight forward, and you can
probably see why users often assume the returned summarized data would contain
two variables &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mpg&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## unnamed summarize variable
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl `mean(mpg)`
#&amp;gt;   &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4        26.7
#&amp;gt; 2     6        19.7
#&amp;gt; 3     8        15.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But as you can see, the variable names wind up being &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mean(mpg)&lt;/code&gt;–
instead of simply &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mpg&lt;/code&gt;. This default behavior may seem obnoxious at
first, but it makes a lot of sense when you think about using &lt;strong&gt;two or more&lt;/strong&gt;
variables when calculating &lt;code&gt;summarize()&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;Regardless, while it’s definitely a good idea to provide your own summary
variable names, you will invariably find yourself in a situation where you
would like to plot summarized variables that were named using the text of
the expressions used to create them.&lt;/p&gt;
&lt;p&gt;Thus, my goal with this post is to identify &lt;strong&gt;three common mistakes users make when attempting to map variables&lt;/strong&gt; from &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise.html&#34;&gt;&lt;code&gt;dplyr::summarize()&lt;/code&gt;&lt;/a&gt;
to aesthetic dimensions of a plot with &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;{ggplot2}&lt;/a&gt;
and conclude by describing a solution.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To follow along with the examples in this post, you will need to load the
&lt;a href=&#34;https://tidyverse.org&#34;&gt;{tidyverse}&lt;/a&gt; set of packages and define a couple stylistic
functions used throughout to make the plots even prettier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load tidyverse
library(tidyverse)
#&amp;gt; ── Attaching packages ───────────────────────────────────────────────────── tidyverse 1.2.1 ──
#&amp;gt; ✔ ggplot2 3.0.0.9000     ✔ purrr   0.2.5     
#&amp;gt; ✔ tibble  1.4.2          ✔ dplyr   0.7.6     
#&amp;gt; ✔ tidyr   0.8.1          ✔ stringr 1.3.1     
#&amp;gt; ✔ readr   1.1.1          ✔ forcats 0.3.0
#&amp;gt; ── Conflicts ──────────────────────────────────────────────────────── tidyverse_conflicts() ──
#&amp;gt; ✖ dplyr::filter() masks stats::filter()
#&amp;gt; ✖ dplyr::lag()    masks stats::lag()

## create style theme
my_theme &amp;lt;- function() {
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;) + 
    theme(plot.title = element_text(size = rel(1.5), face = &amp;quot;bold&amp;quot;), 
      plot.subtitle = element_text(size = rel(1.1)),
      plot.caption = element_text(color = &amp;quot;#777777&amp;quot;, vjust = 0),
      axis.title = element_text(size = rel(.9), hjust = 0.95, face = &amp;quot;italic&amp;quot;),
      panel.grid.major = element_line(size = rel(.1), color = &amp;quot;#000000&amp;quot;), 
      panel.grid.minor = element_line(size = rel(.05), color = &amp;quot;#000000&amp;quot;), 
      legend.position = &amp;quot;none&amp;quot;)
}
my_labs &amp;lt;- function() {
  labs(title = &amp;quot;Average miles per gallon by number of cylinders&amp;quot;, 
    subtitle = &amp;quot;Scatter plot depicting average miles per gallon aggregated by number of cylinders&amp;quot;,
    x = &amp;quot;Number of cylinders&amp;quot;, y = &amp;quot;Miles per gallon&amp;quot;,
    caption = &amp;quot;Source: Estimates calculated from the &amp;#39;mtcars&amp;#39; data set&amp;quot;)
}
my_save &amp;lt;- function(file) {
  ggsave(file, width = 7, height = 4.5, units = &amp;quot;in&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set featured in this post is &lt;strong&gt;mtcars&lt;/strong&gt;, which is bundled as part of
the core &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html&#34;&gt;datasets&lt;/a&gt;
package. Specifically, examples will feature the &lt;code&gt;mpg&lt;/code&gt; (miles per gallon)
and &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## print first six rows
head(mtcars)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-incorrect-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapping incorrect names&lt;/h2&gt;
&lt;p&gt;When visualizing data with &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;, one of the
first and most important steps entails mapping observed variables in the data
set to the aesthetic dimensions of a plot. But aesthetic mapping will only work as
expected when you provide the correct names via &lt;code&gt;ggplot2::aes()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following section describes three common mistakes users make that result in
the mapping of incorrect names.&lt;/p&gt;
&lt;div id=&#34;assuming-a-statistic-inherits-the-name-of-a-variable.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1. Assuming a statistic inherits the name of a variable.&lt;/h3&gt;
&lt;p&gt;A common mistake is to assume that summarizing via &lt;code&gt;mean()&lt;/code&gt; or &lt;code&gt;median()&lt;/code&gt;
results in a variable with the same name. For example, if we summarize the mean
of &lt;code&gt;mpg&lt;/code&gt; like we did above, i.e., &lt;code&gt;summarize(mean(mpg))&lt;/code&gt;, and then try to map
&lt;code&gt;y = mpg&lt;/code&gt;, we get an error because “mpg” doesn’t exist.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## this gets an error because there is no variable named &amp;quot;mpg&amp;quot;
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = mpg)) + 
  geom_point() + 
  geom_line()
#&amp;gt; Error: Aesthetics must be either length 1 or the same as the data (3): x, y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We know from the &lt;strong&gt;summarize&lt;/strong&gt; section above the variable’s name is actually
&lt;code&gt;mean(mpg)&lt;/code&gt;. As this example illustrates, it is incorrect to assume that
summarized estimates inherit the name of the variable they summarize. This may
seem annoying at first, but it makes sense when you think about times when you
may want to summarize using &lt;strong&gt;two or more variables&lt;/strong&gt; in the data set.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;repeating-the-expression-used-in-summarize.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2. Repeating the expression used in &lt;code&gt;summarize()&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;A second common mistake is to assume that you can simply repeat the expression
used in &lt;code&gt;summarize()&lt;/code&gt; when specifying aesthetic mappings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## this also doesn&amp;#39;t work because it tries to caculate the mean of mpg
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = mean(mpg))) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/empty-plot.png&amp;quot;)
#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_point).
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_path).
#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_point).
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_path).&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;https://mikewk.com/img/empty-plot.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The result is a handful of warnings and an empty plot. The above code fails
because it tries to calculate mean of &lt;code&gt;mpg&lt;/code&gt;, which, again, doesn’t exist in the
summarized data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passing-the-expression-as-a-quoted-string.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3. Passing the expression as a quoted string.&lt;/h3&gt;
&lt;p&gt;The third common mistake is to treat the summarized expression name as a string.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## if we put quotes around it, it assumes it&amp;#39;s a string
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = &amp;quot;mean(mpg)&amp;quot;)) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/static-y.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;https://mikewk.com/img/static-y.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;This time we get a plot and no warnings, but it’s clearly not right. It shows
every &lt;code&gt;y&lt;/code&gt; value is exactly the same, but it seems far fetched to think the
average miles per gallon would not vary with number of cylinders.&lt;/p&gt;
&lt;p&gt;In this case, the literal string &lt;code&gt;&amp;quot;mean(mpg)&amp;quot;&lt;/code&gt; is mapped to the &lt;code&gt;y&lt;/code&gt; variable
value, which means it’s converted to a factor and the single factor level is
coded as &lt;code&gt;1&lt;/code&gt; at each observation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solution-use-tick-marks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solution: use tick marks&lt;/h2&gt;
&lt;p&gt;At this point it should be clear the name of the summarized &lt;code&gt;mpg&lt;/code&gt; variable is
actually “mean(mpg),” only now we also know wrapping the expression with quotes
doesn’t work because it assumes the expression is a literal string, not a
variable name.&lt;/p&gt;
&lt;p&gt;The solution to correctly mapping unnamed &lt;code&gt;summarize()&lt;/code&gt; variables is to use
tick marks–the apostrophe-like symbol at the top-left of your keyboard. Tick
marks work a lot like quotes insofar as they open and close and wrap all
elements into a single object. The difference is tick marks assume the marked
object references a symbol. To illustrate, the code below assigns 10 random
numbers to &lt;code&gt;x&lt;/code&gt; and then prints it using both ticks and quotes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## assign 10 random numbers to x
x &amp;lt;- rnorm(10)

## print x wrapped in quotes
&amp;quot;x&amp;quot;
#&amp;gt; [1] &amp;quot;x&amp;quot;

## print x wrapped in tick marks
`x`
#&amp;gt;  [1] -0.989146  0.692351 -0.597960 -1.110763 -1.187307 -0.216094  0.638157
#&amp;gt;  [8]  0.860667  0.879004  0.549694&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, really, tick marks are used to distinguish symbols that contain one or more
unfriendly punctuation/characters, e.g., parenthesis, dashes, spaces, etc.&lt;/p&gt;
&lt;p&gt;With this knowledge, we can now fix the featured &lt;code&gt;summarize()&lt;/code&gt; example by
wrapping the summarized expression, which functions as the name of the
summarized variable, in tick marks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## if we put quotes around it, aes() assumes we are entering a string
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = `mean(mpg)`)) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/tick-marks.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;https://mikewk.com/img/tick-marks.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Of course, most audiences don’t really want to see expression text on a plot,
so we can improve this plot by adding some better labels and a custom theme via
the previously defined &lt;code&gt;my_theme()&lt;/code&gt; and &lt;code&gt;my_labs()&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## use tick marks instead of quotes to indicate variable name
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = `mean(mpg)`)) + 
  geom_point() + 
  geom_line() + 
  my_theme() + 
  my_labs() + 
  my_save(&amp;quot;img/with-labs.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;https://mikewk.com/img/with-labs.png&#34;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; toward the end of &lt;code&gt;summarise()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt;
are interchangeable.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
