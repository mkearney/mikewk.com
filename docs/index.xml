<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael W. Kearney</title>
    <link>/</link>
    <description>Recent content on Michael W. Kearney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© Michael W. Kearney 2018</copyright>
    <lastBuildDate>Wed, 03 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    

    <item>
      <title>Calling out R-bloggers in my R-bloggers post</title>
      <link>/post/2018-09-27-calling-out-r-bloggers-in-my-r-bloggers-post/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-27-calling-out-r-bloggers-in-my-r-bloggers-post/</guid>
      <description>&lt;p&gt;Allow me to preface this post by saying I’m a big fan of &lt;a href=&#34;https://%20r-bloggers.com&#34;&gt;R-bloggers&lt;/a&gt;, a content aggregating site focused on blog posts about R. It
serves a useful purpose&lt;sup&gt;1&lt;/sup&gt; and has considerable reach.&lt;sup&gt;2&lt;/sup&gt; So
although what follows may seem combative, I honestly hope R-bloggers continues
to operate and inspire people to use R and share their R-related ideas and tips
for many years to come.&lt;/p&gt;
&lt;p&gt;With that said, in this post I argue that &lt;strong&gt;R-bloggers should be better
&lt;/strong&gt; than it currently is. To support this argument, I forward the
following three points:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;R-bloggers profits from content but produces very little&lt;/li&gt;
&lt;li&gt;The service provided by R-bloggers can easily be automated&lt;/li&gt;
&lt;li&gt;Its requirements are incommensurate with its contributions&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;background-on-r-bloggers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background on R-bloggers&lt;/h2&gt;
&lt;p&gt;Before expanding on these points, I should provide a little more background
on R-bloggers. As I already mentioned, R-bloggers is an R-related content
aggregating site that circulates and indexes blog posts about R. It was created,
as far as I can tell, in 2005 by &lt;a href=&#34;https://www.r-statistics.com/%20about/&#34;&gt;Tal Galili&lt;/a&gt;, who is, impressively, still listed as the sole maintainer of the site–
though it also appears to be affiliated with the &lt;a href=&#34;http://www.foastat.org/&#34;&gt;Foundation for Open Access
Statistics (FOAS)&lt;/a&gt;, so, hopefully, they provide Tal
with some support.&lt;/p&gt;
&lt;p&gt;As for its mission and a description of its basic operations, here’s the
explanation straight from R-bloggers’
&lt;a href=&#34;https://www.r-bloggers.com/about/&#34;&gt;about section&lt;/a&gt;:&lt;/p&gt;
&lt;figure&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img style=&#34;max-width:600px&#34; src=&#34;/img/r-bloggers-what.png&#34; &gt;
&lt;/p&gt;
&lt;figcaption&gt;
Figure: Screen shot of R-bloggers description/operation
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And here’s the explanation of what R-bloggers offers to bloggers:&lt;/p&gt;
&lt;figure&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img style=&#34;max-width:600px&#34; src=&#34;/img/r-bloggers-contribution.png&#34; &gt;
&lt;/p&gt;
&lt;figcaption&gt;
Figure: Screen shot of R-bloggers contribution description
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Anyone interested in adding their blog to the R-bloggers feed is also
provided with a &lt;a href=&#34;https://www.r-bloggers.com/add-your-blog/&#34;&gt;link containing instructions and a submission form for adding
a blog to R-bloggers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the most part, the &lt;a href=&#34;https://www.r-bloggers.com/%20add-your-blog/&#34;&gt;guidelines for bloggers&lt;/a&gt; are fairly reasonable–blog posts should be about R, include
a minimum amount of well-written non-code content (i.e., code snippets are
not discouraged, but they should be accompanied by text), contain reasonably
reproducible examples/use cases (if relevant), compatible HTML code, and a link
back to R-bloggers, etc. There is one requirement, which, although I completely
understand its rationale, I wish could be relaxed a bit. The requirement is that
bloggers who also post about things not related to R must explicitly flag
eligible posts with an “R” category/tag.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If my only qualm with R-bloggers’s requirements was that they closed off the
possibility of non R-related content, this blog post would end here. Instead,
however, there is one more requirement (and accompanied site design behavior) I
believe is worthy of scrutiny. The requirement to which I’m referring is that
bloggers must &lt;em&gt;“submit a feed with &lt;strong&gt;full content&lt;/strong&gt;”&lt;/em&gt;, meaning
&lt;em&gt;“abstracts/excerpts will not be accepted.”&lt;/em&gt; This, to me, seems like a rather
steep price of admission, as it allows R-bloggers to link to full-content posts
&lt;strong&gt;hosted on the R-bloggers domain&lt;/strong&gt; and, as a consequence, acquire more clicks
and ad revenue at the direct expense of traffic to the original blogs. So, it is
this requirement–along with the aforementioned requirement that I link my blog
to &lt;a href=&#34;https://r-bloggers.com&#34;&gt;R-bloggers&lt;/a&gt;–that has inspired my claim, and the
points below in support of this claim, that given what it asks from
participating blogs, R-bloggers should be better than it currently is.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-bloggers-profits-from-content-but-produces-very-little&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. R-bloggers profits from content but produces very little&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;real&lt;/strong&gt; contribution from R-bloggers is not the &lt;em&gt;production&lt;/em&gt; of content,
but the &lt;em&gt;dissemination&lt;/em&gt; it. And for a site that aggregates content from other
users and then links from its own index to another page on &lt;em&gt;its same domain&lt;/em&gt;
(r-bloggers.com) that contains a &lt;strong&gt;full repost&lt;/strong&gt; of the original content and
only a trivial effort to redirect users to the original blog posts (see screen
shot below for an example), this contribution results in greater reach, more
influence, and higher ad revenues–especially in light of &lt;a href=&#34;https://stackoverflow.blog/2017/10/10/impressive-growth-r/&#34;&gt;R’s growth in recent
years&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img style=&#34;max-width:600px&#34; src=&#34;/img/r-bloggers-attribution.png&#34; &gt;
&lt;/p&gt;
&lt;figcaption&gt;
Figure: Screen shot of standard R-bloggers attribution to original content
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In other words, despite producing very little original content, R-bloggers
profits considerably. And don’t get me wrong; I still think the dissemination of
R-related content is a valuable contribution. I’m just not convinced it’s an
impressive enough contribution to justify those returns. Maybe it was back in
2005,&lt;sup&gt;4&lt;/sup&gt; but in 2018, I would, at the very least, expect the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Mobile-friendly interface
&lt;figure&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img style=&#34;max-width:200px;&#34; src=&#34;/img/r-bloggers-iphone-x.png&#34;&gt;
&lt;/p&gt;
&lt;figcaption&gt;
Figure: Screen shot of R-bloggers as it appears on iPhone X
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Links that work as advertised (see: trying to click on &lt;a href=&#34;https://www.r-bloggers.com/page/947/&#34;&gt;any page after 45&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Front-end web theme created or overhauled since 2009&lt;sup&gt;5&lt;/sup&gt; (the code
provided below scrapes the WordPress theme’s homepage and then prints out the
log of updates)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load rvest
library(rvest)
#&amp;gt; Loading required package: xml2
#&amp;gt; 
#&amp;gt; Attaching package: &amp;#39;rvest&amp;#39;
#&amp;gt; The following object is masked from &amp;#39;package:purrr&amp;#39;:
#&amp;gt; 
#&amp;gt;     pluck
#&amp;gt; The following object is masked from &amp;#39;package:readr&amp;#39;:
#&amp;gt; 
#&amp;gt;     guess_encoding

## read r-bloggers&amp;#39; theme homepage
h &amp;lt;- read_html(&amp;quot;https://themes.bavotasan.com/themes/magazine-basic-wordpress-theme/&amp;quot;)

## write ifelse function that works better with piped vectors
if_else &amp;lt;- function(., .e, .t, .f) {
  e &amp;lt;- rlang::enquo(.e)
  e &amp;lt;- rlang::eval_tidy(.e)
  ifelse(e, rlang::eval_tidy(.t), rlang::eval_tidy(.f))
}

## extract changelog text and format for printing
html_nodes(h, &amp;quot;#changelog div.modal-body&amp;quot;) %&amp;gt;%
  html_text() %&amp;gt;%
  strsplit(&amp;quot;\\s{0,}\n+\\s{0,}|\\s{0,}\r+\\s{0,}&amp;quot;) %&amp;gt;%
  unlist() %&amp;gt;%
  grep(&amp;quot;^$&amp;quot;, ., invert = TRUE, value = TRUE) %&amp;gt;%
  if_else(grepl(&amp;quot;^\\d{2}/\\d{2}&amp;quot;, .), 
    paste0(&amp;quot;\n&amp;quot;, ., &amp;quot;  &amp;quot;),
    paste0(&amp;quot;- &amp;quot;, ., &amp;quot;  &amp;quot;)) %&amp;gt;%
  .[1:23] %&amp;gt;%
  paste(collapse = &amp;quot;\n&amp;quot;) %&amp;gt;%
  paste0(&amp;quot;## Changelog for Magazine-Basic Word Press theme\n&amp;quot;, .) %&amp;gt;%
  cat(fill = TRUE)
#&amp;gt; ## Changelog for Magazine-Basic Word Press theme
#&amp;gt; 
#&amp;gt; 02/08/2017 v3.0.8  
#&amp;gt; - Fixed upgrade button issue  
#&amp;gt; - Fixed mixed placeholders  
#&amp;gt; - Moved language files  
#&amp;gt; - Updated Font Awesome 4.7.0  
#&amp;gt; - Updated preview-pro.php  
#&amp;gt; - Updated language file  
#&amp;gt; - Removed HTML5shiv  
#&amp;gt; - Created template-parts folder  
#&amp;gt; 
#&amp;gt; 03/15/2016 v3.0.7  
#&amp;gt; - Fixed front page broken grid issue  
#&amp;gt; - Fixed H1 tag issue  
#&amp;gt; - Tweaked CSS for search form  
#&amp;gt; - Added page template check on front page  
#&amp;gt; - Added data sanitation  
#&amp;gt; - Updated widget  
#&amp;gt; - Updated language file  
#&amp;gt; 
#&amp;gt; 08/13/2015 v3.0.6  
#&amp;gt; - Fix for static front page issue  
#&amp;gt; - Updated theme data call  
#&amp;gt; 
#&amp;gt; 07/29/2015 v3.0.5  
#&amp;gt; - Updated gallery post format  
#&amp;gt; - Updated widget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In short, while the dissemination of content is a noble contribution, the real
heavy lifting–learning, doing, and communicating innovative data science things
in R–is being done by the actual bloggers, not R-bloggers.com. In fact, as I’ll
demonstrate in the second point below, anyone with a free or
procrastination-filled afternoon can figure out how to string together RSS feeds
and bundle them into an automated content aggregating website. In contrast, it
would take several lifetimes to accumulate all the training and knowledge
expoused by the 750+ bloggers featured on the R-bloggers site.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-service-provided-by-r-bloggers-can-easily-be-automated&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. The service provided by R-bloggers can easily be automated&lt;/h2&gt;
&lt;p&gt;Without scraping the R-bloggers website, I was able to accumulate a large list
of R-related blogs by searching for tweets via &lt;a href=&#34;https://rtweet.info&#34;&gt;rtweet&lt;/a&gt;
containing R-related keywords and URLs that matched at least one of two common
blog post conventions (&lt;code&gt;/post/&lt;/code&gt; or &lt;code&gt;2018/\\d{2}/&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## build search query with URL filters
m &amp;lt;- substr(Sys.Date(), 6, 7)
sq &amp;lt;- glue::glue(
  &amp;#39;(rstats OR tidyverse OR &amp;quot;R package&amp;quot;) (url:post OR url:2018/{m})&amp;#39;)

## search for most recent 100 matching tweets
rt &amp;lt;- rtweet::search_tweets(sq, n = 100)
#&amp;gt; Searching for tweets...
#&amp;gt; Finished collecting tweets!

## print URLs
rt %&amp;gt;%
  pull(urls_expanded_url) %&amp;gt;%
  unlist() %&amp;gt;%
  tfse::na_omit() %&amp;gt;%
  unique()
#&amp;gt; [1] &amp;quot;https://buff.ly/2OCbpY2&amp;quot;                                                                                     
#&amp;gt; [2] &amp;quot;https://link.rweekly.org/bvv&amp;quot;                                                                                
#&amp;gt; [3] &amp;quot;https://recology.info/2018/10/limiting-dependencies/&amp;quot;                                                        
#&amp;gt; [4] &amp;quot;https://blog.rstudio.com/2018/10/02/rstudio-1-2-preview-sql/&amp;quot;                                                
#&amp;gt; [5] &amp;quot;https://link.rweekly.org/c00&amp;quot;                                                                                
#&amp;gt; [6] &amp;quot;https://databricks.com/blog/2018/10/03/mlflow-v0-7-0-features-new-r-api-by-rstudio.html&amp;quot;                     
#&amp;gt; [7] &amp;quot;https://mailund.github.io/r-programmer-blog/2018/10/03/lazy-lists/&amp;quot;                                          
#&amp;gt; [8] &amp;quot;https://mailund.github.io/r-programmer-blog/2018/10/02/promises-their-environments-and-how-we-evaluate-them/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, after using &lt;a href=&#34;https://rvest.r-lib.org&#34;&gt;rvest&lt;/a&gt; to extract post information
and text for previews, I was able to automate, with the help of
&lt;a href=&#34;https://blogdown.rstudio.com&#34;&gt;blogdown&lt;/a&gt;, a continuously updating website with a
feed containing linked post previews. The task was surprisingly easy. I even
decided to expand the aim of my content aggregating feed to be about
data-science generally–hence, its name, &lt;code&gt;data-scribers&lt;/code&gt;. You can see the site
for yourself at &lt;a href=&#34;https://data-scribers.mikewk.com&#34;&gt;data-scribers.mikewk.com&lt;/a&gt;.
&lt;em&gt;NOTE: since launching this site, it has started to take on a life of its own;
the range of topics and languages keep growing, and, at this point, I’m more
interested to see where it goes than I am in pruning it down to English-only
posts or filtering via some overly-strict definition of data-science.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course, to be competitive with R-bloggers, I’d have to add some more
features (visuals, linked tags, search bar, etc.), but, still, I think &lt;a href=&#34;https://data-scribers.mikewk.com&#34;&gt;data-
scribers.mikewk.com&lt;/a&gt; illustrates how easy it
is to automate a blog-aggregating website using today’s freely available tools.
It also, hopefully, puts in perspective the discrepency between R-bloggers’
contribution and R-bloggers’ profits.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;its-requirements-are-incommensurate-with-its-contributions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Its requirements are incommensurate with its contributions&lt;/h2&gt;
&lt;p&gt;My final point doesn’t include any new arguments about R-bloggers’ requirements
or contributions. It is merely an appeal to the bigger picture, and my attempt
to highlight the product of the previous two points–that (1) R-bloggers profits
from content it doesn’t create by (2) providing a relatively easy-to-replicate
service. I also hope that this final point makes it clear that while I like
R-bloggers and hope it continues to disseminate R-related content for a long
time, I would also really like the site to work better on my phone 😁😁😁!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; R-bloggers is a centralized directory of “over 750” R-related blogs&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; At the time of writing, the site has 50k email subscribers, 60k+
Twitter followers, etc.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; So, presumably, if a blogger, who is frequently featured on
the R-bloggers feed, writes a post commenting on something like data analysis
used in a trending political topic, but it’s not specifically about R, then the
post is excluded from the R-bloggers feed. Like I mentioned before, I completely
understand the rationale behind such a policy–and I can easily imagine a world
where relaxing this restriction could devolve into chaos–but, still, part of me
can’t help but feel like the bloggers who help build R-bloggers’ audience also
have a right to access that audience even for topics not directly related to R.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; The &lt;a href=&#34;https://www.r-bloggers.com/creating-%20shaded-areas-in-r/&#34;&gt;oldest post I could find&lt;/a&gt; is from May 2005&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;5&lt;/sup&gt; This made for a fun web scraping exercise. The goal was to recreate
the html list text–i.e., &lt;code&gt;ul &amp;gt; li&lt;/code&gt; while preserving, in meaningful position,
the date/version number text, which preceeded each list but which was was only
tagged with a class-less/id-less &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, in one continuously piped expression.
The hardest part was getting an &lt;code&gt;ifelse&lt;/code&gt; or &lt;code&gt;case_when&lt;/code&gt;-type function working
when passing a character vector via the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator–hence the reason I
defined the &lt;code&gt;if_else()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Labelling dataviz</title>
      <link>/post/2018-09-20-labelling-dataviz/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-20-labelling-dataviz/</guid>
      <description>&lt;p&gt;I still remember how hard it was to learn &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;{ggplot2}&lt;/a&gt;
after only knowing a little about R&lt;sup&gt;1&lt;/sup&gt;. Sure, the plots seemed pretty.
But compared to the ways I had used R before, &lt;code&gt;{ggplot2}&lt;/code&gt;’s syntax seemed almost
counter-intuitive. Its pipe-like &lt;code&gt;+&lt;/code&gt; workflow–building layer-by-layer–
was like nothing I had ever used before. Not to mention, I was unfamiliar
with central terms of art like “&lt;code&gt;geom&lt;/code&gt;s” and “&lt;code&gt;aes&lt;/code&gt;thetics”.&lt;/p&gt;
&lt;p&gt;But then again…the plots were &lt;strong&gt;really pretty&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately for me, &lt;em&gt;being able to generate pretty plots&lt;/em&gt; was a powerful
motivator. Because not long after committing myself to learning how to &lt;code&gt;{ggplot2}&lt;/code&gt;,
I realized why everyone likes it so much–it’s actually really
easy! Once I learned about the key building blocks of &lt;code&gt;ggplot()&lt;/code&gt;, &lt;code&gt;aes()&lt;/code&gt;,
and &lt;code&gt;geom_.*()&lt;/code&gt;), I could create pretty plots for all sorts of data types and
relationships.&lt;/p&gt;
&lt;div id=&#34;its-in-the-details&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;It’s in the details&lt;/h3&gt;
&lt;p&gt;Over time my &lt;a href=&#34;https://twitter.com/search?q=%23rstats%20%23dataviz&amp;amp;src=typed_query&amp;amp;f=image&#34;&gt;#dataviz&lt;/a&gt;
has &lt;a href=&#34;https://twitter.com/kearneymw/status/762833157578162180/photo/1&#34;&gt;gotten&lt;/a&gt; a lot &lt;a href=&#34;https://twitter.com/kearneymw/status/1040702237310365701/photo/1&#34;&gt;better&lt;/a&gt;, but it’s had very little
to do the actual plotting of data points (&lt;code&gt;{ggplot2}&lt;/code&gt; outputs beautiful plots by
default). Instead, my dataviz has improved because I learned how to (a) more
effectively label scales, data points, and other dimensions of a plot and (b)
(re)size and save high-resolution plots using nice-looking fonts.&lt;/p&gt;
&lt;p&gt;With this in mind, my goal with this post is to demonstrate how data
visualizations can be improved via proper labelling. And since this idea was
inspired by my &lt;a href=&#34;../2018-09-17-tick-marks-var-names-and-ggplot2&#34;&gt;last post&lt;/a&gt;,
I will extend the example about the relationship between miles per gallon and
number of cylinders. If you read the setup section from the last post, you can
skip ahead (it’s the same).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To follow along with the examples in this post, you will need to load the
&lt;a href=&#34;https://tidyverse.org&#34;&gt;{tidyverse}&lt;/a&gt; set of packages and define a couple stylistic
functions used throughout to make the plots even prettier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load tidyverse
library(tidyverse)
#&amp;gt; ── Attaching packages ───────────────────────────────────────────────────── tidyverse 1.2.1 ──
#&amp;gt; ✔ ggplot2 3.0.0.9000     ✔ purrr   0.2.5     
#&amp;gt; ✔ tibble  1.4.2          ✔ dplyr   0.7.6     
#&amp;gt; ✔ tidyr   0.8.1          ✔ stringr 1.3.1     
#&amp;gt; ✔ readr   1.1.1          ✔ forcats 0.3.0
#&amp;gt; ── Conflicts ──────────────────────────────────────────────────────── tidyverse_conflicts() ──
#&amp;gt; ✖ dplyr::filter() masks stats::filter()
#&amp;gt; ✖ dplyr::lag()    masks stats::lag()

## create style theme
my_theme &amp;lt;- function() {
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;) + 
    theme(plot.title = element_text(size = rel(1.5), face = &amp;quot;bold&amp;quot;), 
      plot.subtitle = element_text(size = rel(1.1)),
      plot.caption = element_text(color = &amp;quot;#777777&amp;quot;, vjust = 0),
      axis.title = element_text(size = rel(.9), hjust = 0.95, face = &amp;quot;italic&amp;quot;),
      panel.grid.major = element_line(size = rel(.1), color = &amp;quot;#000000&amp;quot;), 
      panel.grid.minor = element_line(size = rel(.05), color = &amp;quot;#000000&amp;quot;), 
      legend.position = &amp;quot;none&amp;quot;)
}
my_labs &amp;lt;- function() {
  labs(title = &amp;quot;Average miles per gallon by number of cylinders&amp;quot;, 
    subtitle = &amp;quot;Scatter plot depicting average miles per gallon aggregated by number of cylinders&amp;quot;,
    x = &amp;quot;Number of cylinders&amp;quot;, y = &amp;quot;Miles per gallon&amp;quot;,
    caption = &amp;quot;Source: Estimates calculated from the &amp;#39;mtcars&amp;#39; data set&amp;quot;)
}
my_save &amp;lt;- function(file) {
  ggsave(file, width = 7, height = 4.5, units = &amp;quot;in&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set featured in this post is &lt;strong&gt;mtcars&lt;/strong&gt;, which is bundled as part of
the core &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html&#34;&gt;datasets&lt;/a&gt;
package. Specifically, examples will feature the &lt;code&gt;mpg&lt;/code&gt; (miles per gallon)
and &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## print first six rows
head(mtcars)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;labelling-dataviz&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Labelling dataviz&lt;/h2&gt;
&lt;p&gt;I think most would agree a &lt;em&gt;good&lt;/em&gt; data visualization clearly
conveys a pattern (or lack of pattern) while being easy to understand, while a
&lt;em&gt;great&lt;/em&gt; data visualization conveys a pattern (or lack of pattern) while
being easy to understand &lt;strong&gt;and aesthetically pleasing&lt;/strong&gt;. The difference between
&lt;em&gt;good&lt;/em&gt; and &lt;em&gt;great&lt;/em&gt; can be something as minor as color palette, but, in my
experience, more often than not the only difference between a good visualization
and great visualizations is labelling.&lt;/p&gt;
&lt;p&gt;In my last post, for example, the first successful plot of &lt;code&gt;mpg&lt;/code&gt; by &lt;code&gt;cyl&lt;/code&gt; was
only &lt;em&gt;okay&lt;/em&gt;–it’s a little bland and it uses an actual expression for an axis title.&lt;/p&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;/img/tick-marks.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;But then I replaced the expression and added a custom theme and a few more labels,
and I think it started to border on being &lt;em&gt;good&lt;/em&gt;.&lt;/p&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;/img/with-labs.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The combination of style changes and labels clearly made a big difference but, still,
I don’t think the above plot is mind-blowing or overly impressive.&lt;/p&gt;
&lt;p&gt;Since there aren’t &lt;em&gt;that&lt;/em&gt; many data points, I think this visualization can be
further improved–with the help of &lt;a href=&#34;https://github.com/slowkow/ggrepel&#34;&gt;&lt;code&gt;{ggrepel}&lt;/code&gt;&lt;/a&gt;–by
labelling the individual data points–either as an additional layer or as a
standalone plot (I didn’t think the summarized &lt;code&gt;cyl&lt;/code&gt; estimates added much so I
dropped the mean line/points).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## - add row names as make variable
## - add noise to cyl for spacing (store as cyl2)
## - plot and format labels with ggrepel
## - adjust x-axis labels
## - specify custom fill colors
mtcars %&amp;gt;%
  mutate(make = row.names(mtcars),
    cyl2 = case_when(
      cyl == 4 ~ cyl - runif(1, .25, .5),
      cyl == 6 ~ cyl - runif(1, .00, .1),
      cyl == 8 ~ cyl + runif(1, .75, 1.25), 
      TRUE ~ cyl
    )) %&amp;gt;%
  ggplot(aes(x = cyl2, y = mpg)) + 
  ggrepel::geom_label_repel(aes(fill = factor(cyl), label = make), 
    family = &amp;quot;Roboto Condensed Light&amp;quot;, label.padding = 0.2, label.size = .25, 
    min.segment.length = 100, color = &amp;quot;black&amp;quot;, size = 3.4) + 
  my_theme() + 
  my_labs() + 
  scale_x_continuous(breaks = c(4, 6, 8)) + 
  scale_fill_manual(values = c(&amp;quot;#efd0ef&amp;quot;, &amp;quot;#d0efd0&amp;quot;, &amp;quot;#d0daef&amp;quot;)) +
  my_save(&amp;quot;img/tick-marks-final.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;/img/tick-marks-final.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;As you can see in the code chunk above, I also added some additional noise to
the &lt;code&gt;cyl&lt;/code&gt; variable to help out &lt;code&gt;{ggrepel}&lt;/code&gt;’s spacing algorithm. The approach
made it possible to plot &lt;em&gt;and label&lt;/em&gt; each car in the data set without overloading
or distracting the image with too much information. So, now, not only does the
image convey the pattern between &lt;code&gt;mpg&lt;/code&gt; and &lt;code&gt;cyl&lt;/code&gt;, but it does so in a way that
more people can recognize ( &lt;em&gt;4-cylinders&lt;/em&gt; is less meaningful than &lt;em&gt;Honda Civic&lt;/em&gt;, for example),
while arguably being even more visually pleasing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I knew just enough to read in data,
do some &lt;a href=&#34;http://lavaan.ugent.be/&#34;&gt;structural equation modeling&lt;/a&gt;, and
generate some simple plots via &lt;code&gt;base::plot()&lt;/code&gt; and &lt;code&gt;base::histogram()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    

    <item>
      <title>Tick marks, variable names, and ggplot2</title>
      <link>/post/2018-09-17-tick-marks-var-names-and-ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-17-tick-marks-var-names-and-ggplot2/</guid>
      <description>&lt;p&gt;A popular workflow in R uses &lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;{dplyr}&lt;/a&gt; to &lt;code&gt;group_by()&lt;/code&gt;
and then &lt;code&gt;summarise()&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt; variables.
It’s an intuitive and easy way to aggregate and describe data, especially along
multiple dimensions. The cost of being both powerful and user-friendly,
however, is its arguably inconvenient default method for assigning names to
summarized values. As the code illustrates below, users can provide their own
names when using &lt;code&gt;summarize()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## explicitly named summarize variable
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mpg = mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl   mpg
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4  26.7
#&amp;gt; 2     6  19.7
#&amp;gt; 3     8  15.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when users don’t explicitly name the summarized values, instead of inheriting
the name of a summarized variable (in this case &lt;code&gt;mpg&lt;/code&gt;), variables are named–by
default–with the text of the expression used to create the summarized value.&lt;/p&gt;
&lt;p&gt;For example, the code below summarizes by estimating the mean &lt;code&gt;mpg&lt;/code&gt; for cars
grouped by number of &lt;code&gt;cyl&lt;/code&gt;. The code is fairly straight forward, and you can
probably see why users often assume the returned summarized data would contain
two variables &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mpg&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## unnamed summarize variable
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl `mean(mpg)`
#&amp;gt;   &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4        26.7
#&amp;gt; 2     6        19.7
#&amp;gt; 3     8        15.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But as you can see, the variable names wind up being &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mean(mpg)&lt;/code&gt;–
instead of simply &lt;code&gt;cyl&lt;/code&gt; and &lt;code&gt;mpg&lt;/code&gt;. This default behavior may seem obnoxious at
first, but it makes a lot of sense when you think about using &lt;strong&gt;two or more&lt;/strong&gt;
variables when calculating &lt;code&gt;summarize()&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;Regardless, while it’s definitely a good idea to provide your own summary
variable names, you will invariably find yourself in a situation where you
would like to plot summarized variables that were named using the text of
the expressions used to create them.&lt;/p&gt;
&lt;p&gt;Thus, my goal with this post is to identify &lt;strong&gt;three common mistakes users make when attempting to map variables&lt;/strong&gt; from &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise.html&#34;&gt;&lt;code&gt;dplyr::summarize()&lt;/code&gt;&lt;/a&gt;
to aesthetic dimensions of a plot with &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;{ggplot2}&lt;/a&gt;
and conclude by describing a solution.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To follow along with the examples in this post, you will need to load the
&lt;a href=&#34;https://tidyverse.org&#34;&gt;{tidyverse}&lt;/a&gt; set of packages and define a couple stylistic
functions used throughout to make the plots even prettier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load tidyverse
library(tidyverse)
#&amp;gt; ── Attaching packages ───────────────────────────────────────────────────── tidyverse 1.2.1 ──
#&amp;gt; ✔ ggplot2 3.0.0.9000     ✔ purrr   0.2.5     
#&amp;gt; ✔ tibble  1.4.2          ✔ dplyr   0.7.6     
#&amp;gt; ✔ tidyr   0.8.1          ✔ stringr 1.3.1     
#&amp;gt; ✔ readr   1.1.1          ✔ forcats 0.3.0
#&amp;gt; ── Conflicts ──────────────────────────────────────────────────────── tidyverse_conflicts() ──
#&amp;gt; ✖ dplyr::filter() masks stats::filter()
#&amp;gt; ✖ dplyr::lag()    masks stats::lag()

## create style theme
my_theme &amp;lt;- function() {
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;) + 
    theme(plot.title = element_text(size = rel(1.5), face = &amp;quot;bold&amp;quot;), 
      plot.subtitle = element_text(size = rel(1.1)),
      plot.caption = element_text(color = &amp;quot;#777777&amp;quot;, vjust = 0),
      axis.title = element_text(size = rel(.9), hjust = 0.95, face = &amp;quot;italic&amp;quot;),
      panel.grid.major = element_line(size = rel(.1), color = &amp;quot;#000000&amp;quot;), 
      panel.grid.minor = element_line(size = rel(.05), color = &amp;quot;#000000&amp;quot;), 
      legend.position = &amp;quot;none&amp;quot;)
}
my_labs &amp;lt;- function() {
  labs(title = &amp;quot;Average miles per gallon by number of cylinders&amp;quot;, 
    subtitle = &amp;quot;Scatter plot depicting average miles per gallon aggregated by number of cylinders&amp;quot;,
    x = &amp;quot;Number of cylinders&amp;quot;, y = &amp;quot;Miles per gallon&amp;quot;,
    caption = &amp;quot;Source: Estimates calculated from the &amp;#39;mtcars&amp;#39; data set&amp;quot;)
}
my_save &amp;lt;- function(file) {
  ggsave(file, width = 7, height = 4.5, units = &amp;quot;in&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set featured in this post is &lt;strong&gt;mtcars&lt;/strong&gt;, which is bundled as part of
the core &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html&#34;&gt;datasets&lt;/a&gt;
package. Specifically, examples will feature the &lt;code&gt;mpg&lt;/code&gt; (miles per gallon)
and &lt;code&gt;cyl&lt;/code&gt; (number of cylinders) variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## print first six rows
head(mtcars)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-incorrect-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapping incorrect names&lt;/h2&gt;
&lt;p&gt;When visualizing data with &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;, one of the
first and most important steps entails mapping observed variables in the data
set to the aesthetic dimensions of a plot. But aesthetic mapping will only work as
expected when you provide the correct names via &lt;code&gt;ggplot2::aes()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following section describes three common mistakes users make that result in
the mapping of incorrect names.&lt;/p&gt;
&lt;div id=&#34;assuming-a-statistic-inherits-the-name-of-a-variable.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1. Assuming a statistic inherits the name of a variable.&lt;/h3&gt;
&lt;p&gt;A common mistake is to assume that summarizing via &lt;code&gt;mean()&lt;/code&gt; or &lt;code&gt;median()&lt;/code&gt;
results in a variable with the same name. For example, if we summarize the mean
of &lt;code&gt;mpg&lt;/code&gt; like we did above, i.e., &lt;code&gt;summarize(mean(mpg))&lt;/code&gt;, and then try to map
&lt;code&gt;y = mpg&lt;/code&gt;, we get an error because “mpg” doesn’t exist.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## this gets an error because there is no variable named &amp;quot;mpg&amp;quot;
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = mpg)) + 
  geom_point() + 
  geom_line()
#&amp;gt; Error: Aesthetics must be either length 1 or the same as the data (3): x, y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We know from the &lt;strong&gt;summarize&lt;/strong&gt; section above the variable’s name is actually
&lt;code&gt;mean(mpg)&lt;/code&gt;. As this example illustrates, it is incorrect to assume that
summarized estimates inherit the name of the variable they summarize. This may
seem annoying at first, but it makes sense when you think about times when you
may want to summarize using &lt;strong&gt;two or more variables&lt;/strong&gt; in the data set.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;repeating-the-expression-used-in-summarize.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2. Repeating the expression used in &lt;code&gt;summarize()&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;A second common mistake is to assume that you can simply repeat the expression
used in &lt;code&gt;summarize()&lt;/code&gt; when specifying aesthetic mappings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## this also doesn&amp;#39;t work because it tries to caculate the mean of mpg
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = mean(mpg))) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/empty-plot.png&amp;quot;)
#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_point).
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_path).
#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA

#&amp;gt; Warning in mean.default(mpg): argument is not numeric or logical: returning
#&amp;gt; NA
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_point).
#&amp;gt; Warning: Removed 3 rows containing missing values (geom_path).&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;/img/empty-plot.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The result is a handful of warnings and an empty plot. The above code fails
because it tries to calculate mean of &lt;code&gt;mpg&lt;/code&gt;, which, again, doesn’t exist in the
summarized data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passing-the-expression-as-a-quoted-string.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3. Passing the expression as a quoted string.&lt;/h3&gt;
&lt;p&gt;The third common mistake is to treat the summarized expression name as a string.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## if we put quotes around it, it assumes it&amp;#39;s a string
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = &amp;quot;mean(mpg)&amp;quot;)) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/static-y.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;/img/static-y.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;This time we get a plot and no warnings, but it’s clearly not right. It shows
every &lt;code&gt;y&lt;/code&gt; value is exactly the same, but it seems far fetched to think the
average miles per gallon would not vary with number of cylinders.&lt;/p&gt;
&lt;p&gt;In this case, the literal string &lt;code&gt;&amp;quot;mean(mpg)&amp;quot;&lt;/code&gt; is mapped to the &lt;code&gt;y&lt;/code&gt; variable
value, which means it’s converted to a factor and the single factor level is
coded as &lt;code&gt;1&lt;/code&gt; at each observation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solution-use-tick-marks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solution: use tick marks&lt;/h2&gt;
&lt;p&gt;At this point it should be clear the name of the summarized &lt;code&gt;mpg&lt;/code&gt; variable is
actually “mean(mpg),” only now we also know wrapping the expression with quotes
doesn’t work because it assumes the expression is a literal string, not a
variable name.&lt;/p&gt;
&lt;p&gt;The solution to correctly mapping unnamed &lt;code&gt;summarize()&lt;/code&gt; variables is to use
tick marks–the apostrophe-like symbol at the top-left of your keyboard. Tick
marks work a lot like quotes insofar as they open and close and wrap all
elements into a single object. The difference is tick marks assume the marked
object references a symbol. To illustrate, the code below assigns 10 random
numbers to &lt;code&gt;x&lt;/code&gt; and then prints it using both ticks and quotes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## assign 10 random numbers to x
x &amp;lt;- rnorm(10)

## print x wrapped in quotes
&amp;quot;x&amp;quot;
#&amp;gt; [1] &amp;quot;x&amp;quot;

## print x wrapped in tick marks
`x`
#&amp;gt;  [1] -0.989146  0.692351 -0.597960 -1.110763 -1.187307 -0.216094  0.638157
#&amp;gt;  [8]  0.860667  0.879004  0.549694&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, really, tick marks are used to distinguish symbols that contain one or more
unfriendly punctuation/characters, e.g., parenthesis, dashes, spaces, etc.&lt;/p&gt;
&lt;p&gt;With this knowledge, we can now fix the featured &lt;code&gt;summarize()&lt;/code&gt; example by
wrapping the summarized expression, which functions as the name of the
summarized variable, in tick marks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## if we put quotes around it, aes() assumes we are entering a string
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = `mean(mpg)`)) + 
  geom_point() + 
  geom_line() + 
  my_save(&amp;quot;img/tick-marks.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;/img/tick-marks.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Of course, most audiences don’t really want to see expression text on a plot,
so we can improve this plot by adding some better labels and a custom theme via
the previously defined &lt;code&gt;my_theme()&lt;/code&gt; and &lt;code&gt;my_labs()&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## use tick marks instead of quotes to indicate variable name
mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarize(mean(mpg)) %&amp;gt;%
  ggplot(aes(x = cyl, y = `mean(mpg)`)) + 
  geom_point() + 
  geom_line() + 
  my_theme() + 
  my_labs() + 
  my_save(&amp;quot;img/with-labs.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;align:center&#34;&gt;
&lt;img src=&#34;/img/with-labs.png&#34;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; toward the end of &lt;code&gt;summarise()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt;
are interchangeable.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
