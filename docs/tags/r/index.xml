<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Michael W. Kearney</title>
    <link>https://mikewk.com/tags/r/</link>
    <description>Recent content in R on Michael W. Kearney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© Michael W. Kearney 2018</copyright>
    <lastBuildDate>Wed, 01 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mikewk.com/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Write an R package from scratch to CRAN</title>
      <link>https://mikewk.com/post/2019-05-01-writing-r-package/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mikewk.com/post/2019-05-01-writing-r-package/</guid>
      <description>On the topic of how to write an R package, there are already several well-established tools (e.g., the {devtools} and {usethis} packages) and comprehensive guides (e.g., Writing R Extensions by R Core Team and R packages by Hadley Wickham). But the biggest obstacle to writing one’s first R package isn’t the availability of tools or comprehensive guides on the subject. It’s the perceived difficulty of it. Fortunately, there are several demystifying blog posts on the subject!</description>
    </item>
    
    <item>
      <title>Three things to know beyond base R</title>
      <link>https://mikewk.com/post/2019-04-23-three-things-to-know-beyond-base-r/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mikewk.com/post/2019-04-23-three-things-to-know-beyond-base-r/</guid>
      <description>I think it’s fair to say that most academics who learn about R do so in the process of training or applying quantitative research methods. As a consequence, knowledge of R among academics tends to be limited to core (base) R packages (R Core Team, 2018) and a small handful of speciality statistical packages, e.g., {lavaan}, {lme4}, {MASS}, {car}, etc. With this in mind, the goal of this post is to provide an overview of three things to know beyond base R.</description>
    </item>
    
    <item>
      <title>Faster code with Rcpp</title>
      <link>https://mikewk.com/post/2019-04-10-faster-code-with-rcpp/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mikewk.com/post/2019-04-10-faster-code-with-rcpp/</guid>
      <description>Recently I was asked if I could add to {rtweet} some basic functions for converting Twitter data into network data objects. I thought this was a reasonable request and a good opportunity for me to learn more about network analysis. But the task of converting Twitter data into network-friendly objects is something that has, at least for me, been really slow and inefficient. So, for the past several weeks, I’ve been slowly working toward what I think believe a simple but efficient solution.</description>
    </item>
    
    <item>
      <title>Installing R and Studio</title>
      <link>https://mikewk.com/post/2018-10-19-installing-r-and-studio/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mikewk.com/post/2018-10-19-installing-r-and-studio/</guid>
      <description>This post describes how to download and perform a basic local install of R and Rstudio. The instructions should work for both macOS and Windows users. Although not required, installation tends to work best when operating systems are up-to-date. At the time of writing, this means R/Rstudio work best with macOS High Sierra and Windows 10.
R vs Rstudio R is a statistical computing language/environment. It is distinct from Rstudio, which is an integrated development environment (IDE) or high- powered graphical user interface (GUI) optimized for working with the R language.</description>
    </item>
    
  </channel>
</rss>